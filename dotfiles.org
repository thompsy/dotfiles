#+TITLE: dotfiles.org

* Dotfiles
:PROPERTIES:
:CUSTOM_ID: dotfiles
:END:
** What is this?
:PROPERTIES:
:TOC:      :include all :depth 9 :force (depth) :ignore (nothing) :local (nothing)
:CUSTOM_ID: what-is-this
:END:
This is my dotfiles configuration in ~org-mode~. To output the source code run ~org-babel-tangle~
(typically ~C-c~ ~C-v~ ~t~). You can also run it from the command line like this in ~bash~:

#+begin_src bash
  $(which emacs) --batch --eval "(require 'org)" --eval '(org-babel-tangle-file "~/dotfiles/dotfiles.org")'
#+end_src

This will create and populate the various config files to the correct locations.

Many (most!) things in this file have been inspired by others making their configuration
available. A few places that I've found particularly useful include:
- [[https://github.com/kwpav/dotfiles/blob/master/emacs.org][kwpav's config]]
- [[http://pages.sachachua.com/.emacs.d/Sacha.html][Sacha Chua's config]]
- [[https://github.com/TheBB/dotemacs][TheBB's config]]
- [[https://github.com/jwiegley/dot-emacs][jwiegly's config]]
- [[https://github.com/syl20bnr/spacemacs][Spacemacs]]
- [[https://github.com/hlissner/doom-emacs][Doom Emacs]]
- [[https://github.com/MatthewZMD/.emacs.d#org0f80f62][M-EMACS]]
- [[https://github.com/ianpan870102/yay-evil-emacs/blob/master/config.org][yay-evil]]
- [[https://framagit.org/steckerhalter/steckemacs.el/-/tree/master][steckemacs]]

:CONTENTS:
- [[#dotfiles][Dotfiles]]
  - [[#what-is-this][What is this?]]
- [[#tasks][Tasks]]
  - [[#homebrew][Homebrew]]
- [[#setup][Setup]]
- [[#emacs][Emacs]]
  - [[#local][Local]]
  - [[#early-init][Early Init]]
  - [[#preamble][Preamble]]
  - [[#package-manager][Package Manager]]
  - [[#core-configuration][Core Configuration]]
    - [[#exec-path-setup][Exec Path Setup]]
    - [[#desktop-mode][Desktop Mode]]
    - [[#files][Files]]
    - [[#discoverability][Discoverability]]
    - [[#savehist][Savehist]]
    - [[#interface-enhancements][Interface Enhancements]]
  - [[#aesthetics][Aesthetics]]
  - [[#keybindings][Keybindings]]
    - [[#hydra][Hydra]]
  - [[#navigation][Navigation]]
    - [[#avy][Avy]]
    - [[#consult][Consult]]
    - [[#minibuffer][Minibuffer]]
    - [[#completion][Completion]]
    - [[#bookmarks][Bookmarks]]
    - [[#help][Help]]
    - [[#beacon][Beacon]]
    - [[#ibuffer][ibuffer]]
  - [[#projects][Projects]]
  - [[#filesystem][Filesystem]]
    - [[#dired][Dired]]
  - [[#editing][Editing]]
    - [[#undo][Undo]]
    - [[#fillunfill-paragraph][Fill/Unfill Paragraph]]
    - [[#spelling][Spelling]]
    - [[#rectangles][Rectangles]]
    - [[#move-to-beginning-of-line][Move to beginning of line]]
    - [[#csv][CSV]]
    - [[#pdfs][PDFs]]
  - [[#searching][Searching]]
  - [[#window-management][Window Management]]
  - [[#software-development][Software Development]]
    - [[#treesitter-setup][Treesitter Setup]]
    - [[#git][Git]]
    - [[#flycheck][Flycheck]]
    - [[#lsp-servers][LSP Servers]]
    - [[#devdocs][DevDocs]]
    - [[#particular-programming-modes][Particular Programming modes]]
  - [[#yasnippets][Yasnippets]]
    - [[#snippets][Snippets]]
    - [[#kubernetes][Kubernetes]]
  - [[#org][Org]]
    - [[#setup-0][Setup]]
    - [[#task-states][Task States]]
    - [[#tags][Tags]]
    - [[#capture-templates][Capture Templates]]
    - [[#regular-meetings-example][Regular Meetings Example]]
    - [[#agenda][Agenda]]
    - [[#blocks][Blocks]]
    - [[#export-options][Export Options]]
  - [[#shells][Shells]]
  - [[#site-local][Site Local]]
  - [[#package-versions][Package Versions]]
- [[#fish][Fish]]
- [[#zellij][Zellij]]
- [[#starship][Starship]]
- [[#wezterm][Wezterm]]
:END:


* Tasks
:PROPERTIES:
:CUSTOM_ID: tasks
:END:
*** TODO Homebrew
:PROPERTIES:
:CUSTOM_ID: homebrew
:END:
It would be good to auto install packages if on the Mac. Better just to add the bundle file to this repo.

** Config Updates
*** TODO Have <TAB> complete rather than move out of current context
In Go, sometimes I want hit <TAB> to complete, rather than move out of the current context.

Tab calls: ~<tab>       ;; yas-next-field-or-maybe-expand~ rather than ~indent-for-tab-command~ which opens the Corfu completion window.
*** TODO Setup spelling and easy usage
- https://codeberg.org/ideasman42/emacs-spell-fu
  - exclude specific faces. Looks good.
- https://github.com/redguardtoo/wucuo
*** TODO Experiment with ~treesit-font-lock-level~
*** TODO Explore ~transient-mark-mode~
See [[https://www.masteringemacs.org/article/fixing-mark-commands-transient-mark-mode]]
*** TODO Expore buffer placement options
See [[https://www.masteringemacs.org/article/demystifying-emacs-window-manager]]

** Org-mode
*** Tags
Ideas here:
- [[https://karl-voit.at/2022/01/29/How-to-Use-Tags/]]
- [[https://takeonrules.com/2024/01/06/leveraging-denotes-signature-for-multiple-purposes//]]
*** Workflows
Meetings:
- [[https://github.com/james-stoup/emacs-org-mode-tutorial]]

Other useful ideas here:
- [[https://dehora.net/journal/how-i-use-org-mode]]

** Packages to try
*** TODO ~bookmarks+~
- we can bookmark buffers that aren't backed by files e.g. scratch
*** TODO ~wgrep~
*** TODO ~tresitter-context~
*** TODO ~visible-mark-mode~
*** TODO ~hyperbole~
*** TODO Debugging with ~dape~
** Future Ideas
*** TODO Explore these configs
- [[https://old.reddit.com/r/emacs/comments/ehjcu2/screenshot_polishing_my_emacs_who_said_an_old/]]
- [[https://kristofferbalintona.me/posts/202202211546/]]
  - good ideas with Vertico etc here
- [[https://kristofferbalintona.me/posts/202202270056/]]
  - Corfu related config
- [[https://protesilaos.com/emacs/dotemacs]]
*** TODO Explore ~embark~ more

* Emacs
:PROPERTIES:
:CUSTOM_ID: emacs
:header-args:emacs-lisp: :tangle "~/.emacs.d/init.el"
:END:
** Local
:PROPERTIES:
:ID:       A9EE2453-8D16-484B-AF4A-D212F0B6F4FE
:CUSTOM_ID: local
:END:
These are various, installation specific settings that might differ across machines, some of which I
don't want to commit to Git.

#+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/local.el" :eval no :mkdirp yes
  (provide 'local-setup)

  (setq user-full-name "Andrew Thompson"
        user-mail-address "github@downthewire.co.uk")

  ;; Use this everywhere
  (defconst my/org-dir
    "~/notebook/")

  (defconst my/org-agenda-files
    (list my/org-dir))
#+END_SRC

** Early Init
:PROPERTIES:
:ID:       9C54903A-53BB-4D29-90A5-9ED43A95F3DE
:CUSTOM_ID: early-init
:END:
The ~early-init.el~ file is called very early in the initialisation process, so this is a good point
to disable ~package.el~ in favour of ~straight.el~.
#+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/early-init.el" :eval no
  ;; Startup speed, annoyance suppression
  (setq gc-cons-threshold (* 500 1024 1024)) ; 500mb
  (setq byte-compile-warnings '(not obsolete))
  (setq warning-suppress-log-types '((comp) (bytecomp)))
  (setq native-comp-async-report-warnings-errors 'silent)

  ;; Silence stupid startup message
  (setq inhibit-startup-echo-area-message (user-login-name))

  ;; Default frame configuration: full screen, good-looking title bar on macOS
  (setq frame-resize-pixelwise t)
  (tool-bar-mode -1)                      ; All these tools are in the menu-bar anyway
  (setq default-frame-alist '((fullscreen . maximized)

  			    ;; You can turn off scroll bars by uncommenting these lines:
  			    (vertical-scroll-bars . nil)
  			    (horizontal-scroll-bars . nil)

  			    ;; Setting the face in here prevents flashes of
  			    ;; color as the theme gets activated
  			    (background-color . "#000000")
  			    (ns-appearance . dark)
  			    (ns-transparent-titlebar . t)))

  ;; Disable the default package manager so we can use straight.el later
  (setq package-enable-at-startup nil)
#+END_SRC

** Preamble
:PROPERTIES:
:ID:       C189F4FE-CACC-4BE4-BBCE-BC1D44D6653E
:CUSTOM_ID: preamble
:END:
Some initial comment blurb.
#+BEGIN_SRC emacs-lisp
  ;;; init.el --- Initialization file for Emacs
  ;;; Commentary: Emacs Startup File --- initialization for Emacs
  ;;; Code:
#+END_SRC

Load some local setup. As noted above, this is generally installation specific, so its easiest to
keep it in a separate file.
#+BEGIN_SRC emacs-lisp
  (require 'local-setup "~/.emacs.d/local.el")
#+END_SRC

** Package Manager
:PROPERTIES:
:ID:       B3B9D84C-661E-457F-9282-421A1B12060E
:CUSTOM_ID: package-manager
:END:
Setup the [[https://github.com/radian-software/straight.el][~straight.el~]] package manager.
#+BEGIN_SRC emacs-lisp
  (setq straight-repository-branch "master")

  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+END_SRC

From the straight docs:
#+BEGIN_QUOTE
By setting the variable straight-cache-autoloads to a non-nil value, you can cause straight.el to
cache the autoloads of all used packages in a single file on disk, and load them from there instead
of from the individual package files if they are still up to date. This reduces the number of disk
IO operations during startup from O(number of packages) to O(1), so it should improve
performance. No other configuration should be necessary to make this work; however, you may wish to
call straight-prune-build occasionally, since otherwise this cache file may grow quite large over
time.
#+END_QUOTE
#+BEGIN_SRC emacs-lisp
  (setq straight-cache-autoloads t)
#+END_SRC

In addition:
#+BEGIN_QUOTE
You may customize straight-use-package-by-default to make it so that :straight t is assumed unless
you explicitly override it with :straight nil.
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
  (setq straight-use-package-by-default t)
#+END_SRC

Install [[https://github.com/jwiegley/use-package][~use-package~]] for easily installing other packages.
#+BEGIN_SRC emacs-lisp
  ;; Install use-package to use with straight.el
  (straight-use-package 'use-package)
#+END_SRC

I don't want to use the built-in version of org-mode since it's usually pretty old. Instead I want
straight to pull down the latest version. To avoid the built-in version getting loaded we need to
explicitly load it with straight early in the init process. See more details in the [[https://github.com/radian-software/straight.el#the-wrong-version-of-my-package-was-loaded][~README.md~]].
#+BEGIN_SRC emacs-lisp
  (straight-use-package 'org)
#+END_SRC

Install and load packages immediately by default.
#+BEGIN_SRC emacs-lisp
  (setq use-package-always-demand t)
  (setq use-package-always-ensure t)

#+END_SRC
** Core Configuration
:PROPERTIES:
:ID:       58236767-8AD4-4A25-A2A9-02BDEDC9E6D4
:CUSTOM_ID: core-configuration
:END:
A few miscellaneous settings. Note that emacs is not really a package strictly speaking which is why
we include ~:straight nil~ so that our package manager doesn't try to fetch the source.
#+BEGIN_SRC emacs-lisp
  (use-package emacs
    :straight nil
    :ensure nil
    :init
    ;; answer with y/n instead of typing out yes/no
    (defalias 'yes-or-no-p 'y-or-n-p)
    ;; Set up trailing whitespace deletion after init
    (add-hook 'after-init-hook
              (lambda () (add-hook 'before-save-hook 'delete-trailing-whitespace)))
    :config
    (setq indent-tabs-mode nil
          tab-width 4
          show-trailing-whitespace t
          fill-column 100)
    (setq-default indent-tabs-mode nil
                  fill-column 100)
    (setopt sentence-end-double-space nil
            display-time-default-load-average nil)
    :custom
    (global-goto-address-mode 1)
    ;; load new source files instead of stale elisp bytecode
    (load-prefer-newer t)
    ;; allow emacs to be any size, removes black bars
    (frame-resize-pixelwise t))
#+END_SRC

It's useful to have buffers auto-revert when files on disk change especially when using Git branches
a lot!
#+BEGIN_SRC emacs-lisp
  (use-package autorevert
    :straight nil
    :ensure nil
    :custom
    (global-revert-check-vc-info t)
    :config
    (global-auto-revert-mode +1)
    ;; Automatically reread from disk if the underlying file changes
    (setopt auto-revert-avoid-polling t)
    ;; Some systems don't do file notifications well; see
    ;; https://todo.sr.ht/~ashton314/emacs-bedrock/11
    (setopt auto-revert-interval 5)
    (setopt auto-revert-check-vc-info t))
#+END_SRC

Use the system keyboard when killing and yanking.
#+BEGIN_SRC emacs-lisp
  (use-package simple
    :straight nil
    :ensure nil
    :custom
    ;; killing and yanking uses the system clipboard
    (save-interprogram-paste-before-kill t))
#+END_SRC

[[https://github.com/emacs-mirror/emacs/blob/master/lisp/saveplace.el][~saveplace~]] jumps back to the last when later visiting a file. This is handy to pick up where you
left off.
#+BEGIN_SRC emacs-lisp
  (use-package saveplace
    :straight nil
    :ensure nil
    :config
    (save-place-mode +1))
#+END_SRC

[[https://github.com/emacscollective/no-littering][~no-littering~]] keeps configuration files and other persistent data under ~user-emacs-directory~ rather
than spamming them in inconsistent places.
#+BEGIN_SRC emacs-lisp
  (use-package no-littering
    :init
    (setq no-littering-etc-directory
          (expand-file-name "etc/" user-emacs-directory)
          no-littering-var-directory
          (expand-file-name "var/" user-emacs-directory)))
#+END_SRC

Use a separate custom file to remove auto-generated code from ~init.el~. This should be loaded prior
to any themes so that they confirmation code gets stored in ~custom.el~.
#+BEGIN_SRC emacs-lisp
  (use-package cus-edit
    :straight nil
    :ensure nil
    :custom
    (custom-file (expand-file-name "custom.el" user-emacs-directory))
    :config
    (if (file-exists-p custom-file)
        (load-file custom-file)))
#+END_SRC

#+begin_src
(use-package gcmh
  :config
  (gcmh-mode 1)
  ;; You can customize these, but the defaults are often good
  (setq gcmh-high-cons-threshold (* 200 1024 1024)) ; e.g., 128MB when active
  (setq gcmh-idle-delay 1) ; Run GC after 1 seconds of idle time
  (setq gcmh-auto-mode-enable t) ; Enable for all modes
  (setq gcmh-verbose t) ; For debugging/monitoring
  )
#+end_src

An improved ~keyboard-quit~ function courtesy of [[https://emacsredux.com/blog/2025/06/01/let-s-make-keyboard-quit-smarter/][Emacs Redux]].
#+begin_src emacs-lisp
  (defun my/keyboard-quit ()
    "Smater version of the built-in `keyboard-quit'.

  The generic `keyboard-quit' does not do the expected thing when
  the minibuffer is open.  Whereas we want it to close the
  minibuffer, even without explicitly focusing it."
    (interactive)
    (if (active-minibuffer-window)
        (if (minibufferp)
            (minibuffer-keyboard-quit)
          (abort-recursive-edit))
      (keyboard-quit)))

(global-set-key [remap keyboard-quit] #'my/keyboard-quit)

#+end_src
*** Exec Path Setup
:PROPERTIES:
:ID:       0C607D19-2464-4AC0-8FDC-BB6A2420ED3F
:CUSTOM_ID: exec-path-setup
:END:
[[https://github.com/purcell/exec-path-from-shell][~exec-path-from-shell~]] loads the ~PATH~ from your shell setup. This is useful when running Emacs from
a non-shell environment like OSX.
#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :config
    (exec-path-from-shell-initialize))
#+END_SRC


*** Desktop Mode
:PROPERTIES:
:ID:       f5c2d55e-7ab2-4d3a-a174-ed13bc8f5405
:CUSTOM_ID: desktop-mode
:END:
Restore the previously open buffers when restarting.
#+begin_src emacs-lisp
  (use-package desktop
    :config
    (desktop-save-mode 1)
    (setq desktop-save t
          desktop-auto-save-timeout 300))
#+end_src
*** Files
:PROPERTIES:
:ID:       A2401A62-B9F5-4A39-8C9B-9BEE0ECCEC17
:CUSTOM_ID: files
:END:
Setup some basic file hygiene. Keep some backup files around, but keep them out of sight.
#+BEGIN_SRC emacs-lisp
  (use-package files
    :straight nil
    :ensure nil
    :init
    (recentf-mode 1)
    :config
    (setq backup-by-copying t
          backup-directory-alist '((".*" . "~/.emacs.d/backups/"))
          delete-old-versions t
          delete-auto-save-files t
          kept-new-versions 6
          kept-old-versions 2
          version-control t
          vc-make-backup-files t
          recentf-max-menu-items 250
          recentf-max-saved-items 5000
          create-lockfiles nil
          auto-save-file-name-transforms
          `((".*" "~/.emacs.d/auto-saves/" t))))
#+END_SRC

Use UTF-8 everywhere.
#+BEGIN_SRC emacs-lisp
  (use-package mule
    :straight nil
    :ensure nil
    :config
    (prefer-coding-system 'utf-8-unix)
    (set-default-coding-systems 'utf-8-unix)
    (set-language-environment 'utf-8)
    (set-terminal-coding-system 'utf-8-unix)
    (setq locale-coding-system 'utf-8-unix)
    (set-selection-coding-system 'utf-8-unix)
    (setenv "LC_CTYPE" "UTF-8")
    (setenv "LC_ALL" "en_US.UTF-8")
    (setenv "LANG" "en_US.UTF-8"))
#+END_SRC

~uniqify~ renames buffers with the same name so that they're easier to distinguish.
#+BEGIN_SRC emacs-lisp
  (use-package uniquify
    :straight nil
    :ensure nil
    :config
    (setq uniquify-buffer-name-style 'forward
          uniquify-separator "/"
          ;; rename after killing uniquified
          uniquify-after-kill-buffer-p t
          ;; don't muck with special buffers
          uniquify-ignore-buffers-re "^\\*"))
#+END_SRC

*** Discoverability
:PROPERTIES:
:ID:       97DB78E1-C522-4A0E-9AC2-6FBA15253B26
:CUSTOM_ID: discoverability
:END:
[[https://github.com/justbur/emacs-which-key][~which-key~]] displays all of the available keybindings following a incompletely entered command. For
example, pressing ~C-x~ and waiting a moment will cause ~which-key~ to populate the minibuffer with all
the available next keys along with their corresponding commands. This makes discovery of new
commands very easy.

The only slight issue with this is that the size of the minibuffer expands a lot which can cause the
view of the current buffer to change depending on where the point is. ~which-key-posframe~ provides an
improvement on this by popping up in a floating window.

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :custom
    (which-key-idle-delay 0)
    :config
    (which-key-mode +1))
#+END_SRC

*** Savehist
:PROPERTIES:
:ID:       C7C96A0A-E6EA-4FB1-BD24-9E83A8F7761C
:CUSTOM_ID: savehist
:END:
Save a number of useful variables so that they persist across Emacs sessions.
#+BEGIN_SRC emacs-lisp
  ;; Save history of minibuffer
  (savehist-mode)
  (setq savehist-additional-variables '(kill-ring search-ring regexp-search-ring))
#+END_SRC

*** Interface Enhancements
:PROPERTIES:
:ID:       2D0FB78A-3A47-4707-A038-6DD3FCF03DE3
:CUSTOM_ID: interface-enhancements
:END:
#+BEGIN_SRC emacs-lisp
  ;; Mode line information
  (setopt line-number-mode t)                        ; Show current line in modeline
  (setopt column-number-mode t)                      ; Show column as well

  (setopt x-underline-at-descent-line nil)           ; Prettier underlines
  (setopt switch-to-buffer-obey-display-actions t)   ; Make switching buffers more consistent

  (setopt indicate-buffer-boundaries 'left)  ; Show buffer top and bottom in the margin

  ;; Enable horizontal scrolling
  (setopt mouse-wheel-tilt-scroll t)
  (setopt mouse-wheel-flip-direction t)

  ;; Misc. UI tweaks
  (blink-cursor-mode -1)                                ; Steady cursor
  (pixel-scroll-precision-mode)                         ; Smooth scrolling

  ;; Programming mode setup
  (use-package prog-mode
    :straight nil
    :ensure nil
    :hook ((prog-mode . display-line-numbers-mode)
           (prog-mode . hl-line-mode))
    :custom
    (display-line-numbers-width 3))

  ;; Text mode setup
  (use-package text-mode
    :straight nil
    :ensure nil
    :hook ((text-mode . visual-line-mode)
           (text-mode . hl-line-mode)))
#+END_SRC

** Aesthetics
:PROPERTIES:
:ID:       6984A6E9-A3A7-4673-8A6A-64E17B687898
:CUSTOM_ID: aesthetics
:END:
Turn off a bunch of frame related functionality for a more minimal experience.
#+BEGIN_SRC emacs-lisp
  (use-package frame
    :straight nil
    :ensure nil
    :config
    (blink-cursor-mode -1)
    (setq initial-scratch-message ""
          inhibit-startup-message t
          visible-bell nil
          ring-bell-function 'ignore
          initial-frame-alist
          '((menu-bar-lines . 0)
            (tool-bar-lines . 0)))
    (scroll-bar-mode 0)
    (tool-bar-mode 0)
    (menu-bar-mode 0)
    (global-hl-line-mode 1))
#+END_SRC

[[https://draculatheme.com/emacs][Dracula]] is a nice theme that's available for lots of apps.
#+BEGIN_SRC emacs-lisp
  (use-package dracula-theme)

  ;; If we're running in daemon mode, setup the theme after the frame loads. This is taken from:
  ;; https://stackoverflow.com/questions/18904529/after-emacs-deamon-i-can-not-see-new-theme-in-emacsclient-frame-it-works-fr
  (if (daemonp)
    (add-hook 'after-make-frame-functions
        (lambda (frame)
            (with-selected-frame frame
                (load-theme 'dracula t))))
    (load-theme 'dracula t))
  (add-to-list 'default-frame-alist '(font . "FiraCode Nerd Font-14"))

  (use-package all-the-icons)

  (use-package all-the-icons-completion
    :init
    (all-the-icons-completion-mode))
#+END_SRC

#+begin_src emacs-lisp
  ;; This assumes you've installed the package via MELPA.
  (use-package ligature
    :config
    ;; Enable the "www" ligature in every possible major mode
    (ligature-set-ligatures 't '("www"))
    ;; Enable traditional ligature support in eww-mode, if the
    ;; `variable-pitch' face supports it
    (ligature-set-ligatures 'eww-mode '("ff" "fi" "ffi"))
    ;; Enable all Cascadia Code ligatures in programming modes
    (ligature-set-ligatures 'prog-mode '("|||>" "<|||" "<==>" "<!--" "####" "~~>" "***" "||=" "||>"
                                         ":::" "::=" "=:=" "===" "==>" "=!=" "=>>" "=<<" "=/=" "!=="
                                         "!!." ">=>" ">>=" ">>>" ">>-" ">->" "->>" "-->" "---" "-<<"
                                         "<~~" "<~>" "<*>" "<||" "<|>" "<$>" "<==" "<=>" "<=<" "<->"
                                         "<--" "<-<" "<<=" "<<-" "<<<" "<+>" "</>" "###" "#_(" "..<"
                                         "..." "+++" "/==" "///" "_|_" "www" "&&" "^=" "~~" "~@" "~="
                                         "~>" "~-" "**" "*>" "*/" "||" "|}" "|]" "|=" "|>" "|-" "{|"
                                         "[|" "]#" "::" ":=" ":>" ":<" "$>" "==" "=>" "!=" "!!" ">:"
                                         ">=" ">>" ">-" "-~" "-|" "->" "--" "-<" "<~" "<*" "<|" "<:"
                                         "<$" "<=" "<>" "<-" "<<" "<+" "</" "#{" "#[" "#:" "#=" "#!"
                                         "##" "#(" "#?" "#_" "%%" ".=" ".-" ".." ".?" "+>" "++" "?:"
                                         "?=" "?." "??" ";;" "/*" "/=" "/>" "//" "__" "~~" "(*" "*)"
                                         "\\\\" "://"))
    ;; Enables ligature checks globally in all buffers. You can also do it
    ;; per mode with `ligature-mode'.
    (global-ligature-mode t))
#+end_src
[[https://github.com/seagle0128/doom-modeline][~doom-modeline~]] is a fancy, fast and minimal mode-line. This requires running ~M-x
nerd-icons-install-fonts~ to install the required icon font.
#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
    :demand t
    :init
    (column-number-mode +1)
    (doom-modeline-mode +1)
    :config
    (setq doom-modeline-height 1)
    (set-face-attribute 'mode-line nil :height 150)
    (set-face-attribute 'mode-line-inactive nil :height 150)
    :custom
    (doom-modeline-vcs-max-length 50)
    (doom-modeline-buffer-file-name-style 'truncate-upto-project))
#+END_SRC

Setup emojis!
#+begin_src emacs-lisp
  (use-package emojify
    :config
    (when (member "Segoe UI Emoji" (font-family-list))
      (set-fontset-font
       t 'symbol (font-spec :family "Segoe UI Emoji") nil 'prepend))
    (setq emojify-display-style 'unicode)
    (setq emojify-emoji-styles '(unicode))
    (bind-key* (kbd "C-c :") #'emojify-insert-emoji))
#+end_src

** Keybindings
:PROPERTIES:
:ID:       55DF7803-F4D1-43ED-B5EC-F4377C20B52B
:CUSTOM_ID: keybindings
:END:
[[https://github.com/noctuid/general.el][~general.el~]] provides a convenient method for binding keys. It also integrates well with
~use-package~. In particular, this allows us to easily setup a global leader key, ~my-leader-def~ and
chain bindings from that.
#+BEGIN_SRC emacs-lisp
  (use-package general
    :custom
    (general-override-states '(insert emacs hybrid normal visual motion operator replace))
    :config
    (general-define-key
     "C-w" 'backward-kill-word
     "C-c C-k" 'kill-region
     "C-x C-k" 'kill-region
     ;; Make it easier to run commands
     "C-x C-m" 'execute-extended-command
     "C-x m" 'execute-extended-command
     "C-c C-m" 'execute-extended-command
     "C-c m" 'execute-extended-command
     ;; Taken from https://www.irreal.org/blog/?p=10424:
     "C-x t" 'beginning-of-buffer
     "C-x e" 'end-of-buffer
     ;; ibuffer
     "C-x C-b" 'ibuffer
     ;; Disable this keybinding as I keep hitting it accidentially
     "C-x C-z" nil
     ;; Disable zooming with the mouse wheel
     "C-<wheel-up>" nil
     "C-<wheel-down>" nil
     "C-M-<wheel-up>" nil
     "C-M-<wheel-down>" nil
     "s-t" nil
     "H-t" nil
     "A-t" nil
     )

    ;; Make general's keybindings take precedence over keys bound to other minor mode keymaps.
    (general-override-mode)

    ;; We need to call this so that we can allocate C-t as a prefix key. See
    ;; https://github.com/noctuid/general.el#automatic-key-unbinding for details.
    (general-auto-unbind-keys)
    ;; Create a definer where most of my commands will live under
    (general-create-definer my-leader-def
      :prefix "C-t")
    ;; Setup some initial bindings.
    ;; TODO some of these should probably live elsewhere
    (my-leader-def
      "m" '(execute-extended-command :wk "exec")
      "a" 'org-agenda
      "b" '(:ignore t :wk "bookmarks")
      "bs" 'bookmark-set
      "bl" 'list-bookmarks
      "bj" 'consult-bookmark
      ;; quit / restart
      "q" '(:ignore t :wk "quit")
      "qq" 'save-buffers-kill-terminal
      "qQ" 'save-buffers-kill-emacs
      "qr" 'restart-emacs))
#+END_SRC

[[https://github.com/Fuco1/free-keys][~free-keys~]] shows unused key bindings.
#+begin_src emacs-lisp
  (use-package free-keys)
#+end_src

*** Hydra
:PROPERTIES:
:ID:       1845AD20-50EC-468B-99C6-19808C288DF1
:CUSTOM_ID: hydra
:END:
[[https://github.com/abo-abo/hydra][~hydra~]] allows us to specify related keybindings together in a
neat way. Note that ~:wk~ allows us to specify the text that is displayed by ~which-key~ for this hydra.
#+BEGIN_SRC emacs-lisp
  (use-package hydra)

  ;; This allows us to use :hydra within use-package
  (use-package use-package-hydra)
#+END_SRC

This hydra provides easy access to various package management commands.
#+BEGIN_SRC emacs-lisp
  (my-leader-def "P" '(hydra-straight-helper/body :wk "pkgs"))
  (defhydra hydra-straight-helper (:hint nil :color green)
    "
        _c_heck all       |_f_etch all     |_m_erge all      |_n_ormalize all   |p_u_sh all
        _C_heck package   |_F_etch package |_M_erge package  |_N_ormlize package|p_U_sh package
        ----------------^^+--------------^^+---------------^^+----------------^^+------------||_q_uit||
        _r_ebuild all     |_p_ull all      |_v_ersions freeze|_w_atcher start   |_g_et recipe
        _R_ebuild package |_P_ull package  |_V_ersions thaw  |_W_atcher quit    |prun_e_ build"
    ("c" straight-check-all)
    ("C" straight-check-package)
    ("r" straight-rebuild-all)
    ("R" straight-rebuild-package)
    ("f" straight-fetch-all)
    ("F" straight-fetch-package)
    ("p" straight-pull-all)
    ("P" straight-pull-package)
    ("m" straight-merge-all)
    ("M" straight-merge-package)
    ("n" straight-normalize-all)
    ("N" straight-normalize-package)
    ("u" straight-push-all)
    ("U" straight-push-package)
    ("v" straight-freeze-versions)
    ("V" straight-thaw-versions)
    ("w" straight-watcher-start)
    ("W" straight-watcher-quit)
    ("g" straight-get-recipe)
    ("e" straight-prune-build)
    ("q" nil))
#+END_SRC

This hydra gives easy access to inserting various Unicode characters.
#+BEGIN_SRC emacs-lisp
  (defun my/insert-unicode (unicode-name)
    "Same as C-x 8 enter UNICODE-NAME."
    (insert-char (gethash unicode-name (ucs-names))))

  (my-leader-def "u" '(hydra-unicode/body :wk "unicode"))
  (defhydra hydra-unicode (:hint nil)
    "
          Unicode  _e_ €  _g_ £
                   _f_ ♀  _r_ ♂
                   _o_ °  _m_ µ  _z_ ë  _Z_ Ë
                   _n_ ←  _e_ ↓  _i_ ↑  _o_ →
          "
    ("e" (my/insert-unicode "EURO SIGN"))
    ("g" (my/insert-unicode "POUND SIGN"))

    ("r" (my/insert-unicode "MALE SIGN"))
    ("f" (my/insert-unicode "FEMALE SIGN"))

    ("o" (my/insert-unicode "DEGREE SIGN"))
    ("m" (my/insert-unicode "MICRO SIGN"))

    ("z" (my/insert-unicode "LATIN SMALL LETTER E DIAERESIS"))
    ("Z" (my/insert-unicode "LATIN CAPITAL LETTER E DIAERESIS"))

    ("n" (my/insert-unicode "LEFTWARDS ARROW"))
    ("e" (my/insert-unicode "DOWNWARDS ARROW"))
    ("i" (my/insert-unicode "UPWARDS ARROW"))
    ("o" (my/insert-unicode "RIGHTWARDS ARROW")))
#+END_SRC

[[https://www.emacswiki.org/emacs/download/zoom-frm.el][~zoom-frm~]] is a nice way to zoom in and out on a frame basis. This is useful when switching from
smaller to larger screens.
#+BEGIN_SRC emacs-lisp
  (use-package zoom-frm
    :general
    (my-leader-def "z" '(hydra-zoom/body :wk "zoom"))
    :hydra (hydra-zoom (:column 2)
                       ("n" zoom-frm-in "Zoom in")
                       ("t" zoom-frm-out "Zoom out")
                       ("r" (text-scale-set 0) "Reset zoom")
                       ("0" (text-scale-set 0) :bind nil :exit t)
                       ("q" nil "quit")))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (my-leader-def "n" '(hydra-macro/body :wk "macros"))0
  (defhydra hydra-macro (:hint nil :color pink :pre
                               (when defining-kbd-macro
                                 (kmacro-end-macro 1)))
    "
    ^Create-Cycle^   ^Basic^           ^Insert^        ^Save^         ^Edit^
  ╭─────────────────────────────────────────────────────────────────────────╯
       ^_i_^           [_e_] execute    [_n_] insert    [_b_] name      [_'_] previous
       ^^↑^^           [_d_] delete     [_t_] set       [_K_] key       [_,_] last
   _j_ ←   → _l_       [_o_] edit       [_a_] add       [_x_] register
       ^^↓^^           [_r_] region     [_f_] format    [_B_] defun
       ^_k_^           [_m_] step
      ^^   ^^          [_s_] swap
  "
    ("j" kmacro-start-macro :color blue)
    ("l" kmacro-end-or-call-macro-repeat)
    ("i" kmacro-cycle-ring-previous)
    ("k" kmacro-cycle-ring-next)
    ("r" apply-macro-to-region-lines)
    ("d" kmacro-delete-ring-head)
    ("e" kmacro-end-or-call-macro-repeat)
    ("o" kmacro-edit-macro-repeat)
    ("m" kmacro-step-edit-macro)
    ("s" kmacro-swap-ring)
    ("n" kmacro-insert-counter)
    ("t" kmacro-set-counter)
    ("a" kmacro-add-counter)
    ("f" kmacro-set-format)
    ("b" kmacro-name-last-macro)
    ("K" kmacro-bind-to-key)
    ("B" insert-kbd-macro)
    ("x" kmacro-to-register)
    ("'" kmacro-edit-macro)
    ("," edit-kbd-macro)
    ("q" nil :color blue))
#+END_SRC

** Navigation
:PROPERTIES:
:CUSTOM_ID: navigation
:END:
*** Avy
:PROPERTIES:
:ID:       6CBC9104-AD62-4843-8C69-EB2223F5903D
:CUSTOM_ID: avy
:END:
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :demand t
    :config (setq avy-background t
      		avy-keys '(
      			   ?a ?r ?s ?t ?g ?m ?n ?e ?i ?o
      			   ?z ?x ?c ?d ?v ?k ?h ?, ?.
      			   ?q ?w ?f ?p ?b ?j ?l ?u ?'))
    :general ("C-'" 'avy-goto-char-timer))
#+END_SRC

*** Consult
:PROPERTIES:
:ID:       49DCD1B7-C7DE-4D49-8E47-D194614FA7EB
:CUSTOM_ID: consult
:END:
#+BEGIN_SRC emacs-lisp
  (use-package embark-consult
    :after (embark consult))

  ;; Safe wrapper for consult-compile-error to prevent minibuffer conflicts
  (defun my/consult-compile-error-safe ()
    "Run consult-compile-error without auto-navigation interference."
    (interactive)
    (let ((compilation-auto-jump-to-first-error nil)
          (compilation-auto-jump-to-next nil)
          (compilation-skip-to-next-location nil)
          (next-error-hook nil)
          (compilation-finish-functions nil))
      ;; Temporarily disable all compilation navigation hooks
      (cl-letf (((symbol-function 'compilation-auto-jump) (lambda (&rest _) nil))
                ((symbol-function 'compilation-goto-locus) (lambda (&rest _) nil)))
        (consult-compile-error))))

  ;; Consult: Misc. enhanced commands
  (use-package consult
    :general
    ("C-c M-x" 'consult-mode-command)
    ("C-c h" 'consult-history)
    ("C-c k" 'consult-kmacro)
    ("C-c m" 'consult-man)
    ("C-c i" 'consult-info)
    ;; Drop-in replacements
    ("M-y"   'consult-yank-from-kill-ring)   ;; orig. yank-pop
    ("M-g g" 'consult-goto-line)
    ("C-x b" 'consult-buffer)                ;; orig. switch-to-buffer
    ("C-x r b" 'consult-bookmark)            ;; orig. bookmark-jump
    ("C-x p b" 'consult-project-buffer)      ;; orig. project-switch-to-buffer
    ;; M-g bindings in `goto-map'
    ("M-g e" 'my/consult-compile-error-safe)
    ("M-g f" 'consult-flycheck)
    ("M-g g" 'consult-goto-line)             ;; orig. goto-line
    ("M-g M-g" 'consult-goto-line)           ;; orig. goto-line
    ("M-g o" 'consult-outline)               ;; Alternative: consult-org-heading
    ("M-g m" 'consult-mark)
    ("M-g k" 'consult-global-mark)
    ("M-g i" 'consult-imenu)
    ("M-g I" 'consult-imenu-multi)
    ("M-g s" 'consult-eglot-symbols)
    ;; M-s bindings in `search-map'
    ("M-s d" 'consult-find)                  ;; Alternative: consult-fd
    ("M-s c" 'consult-locate)
    ("M-s g" 'consult-grep)
    ("M-s G" 'consult-git-grep)
    ("M-s r" 'consult-ripgrep)
    ("M-s l" 'consult-line)
    ("M-s L" 'consult-line-multi)
    ("M-s k" 'consult-keep-lines)
    ("M-s u" 'consult-focus-lines)
    ;; Isearch integration
    ("M-s e" 'consult-isearch-history)
    (:keymaps 'isearch-mode-map
    	    "M-e" 'consult-isearch-history   ;; orig. isearch-edit-string
    	    "M-s e" 'consult-isearch-history ;; orig. isearch-edit-string
    	    "M-s l" 'consult-line            ;; needed by consult-line to detect isearch
    	    "M-s L" 'consult-line-multi)     ;; needed by consult-line to detect isearch
    ;; Minibuffer history
    (:keymaps 'minibuffer-local-map
    	    "M-s" 'consult-history)          ;; orig. next-matching-history-element
    :config
    ;; Narrowing lets you restrict results to certain groups of candidates
    (setq consult-narrow-key "<")

    ;; set manual preview for result that will require a disk read
    (consult-customize
     consult-ripgrep consult-git-grep consult-grep
     consult-bookmark consult-recent-file consult-xref
     consult--source-bookmark consult--source-file-register
     consult--source-recent-file consult--source-project-recent-file
     ;; :preview-key '(:debounce 0.4 any) ;; Option 1: Delay preview
     :preview-key "M-.")            ;; Option 2: Manual preview
    :init
    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref)
    )

  (use-package consult-project-extra
    :straight t
    :general
    ("C-x p f" 'consult-project-extra-find)
    ("C-x p o" 'consult-project-extra-find-other-window))

  (use-package consult-dir
    :after vertico
    :general
    ("C-x C-d" 'consult-dir)
    (:keymaps 'vertico-map
              "C-x C-d" 'consult-dir
              "C-x C-j" 'consult-dir-jump-file))

  ;; nice package to show the xref stack
  (use-package consult-xref-stack
    :straight (consult-xref-stack :type git :host github :repo "brett-lempereur/consult-xref-stack")
    :bind
    (("C-," . consult-xref-stack-backward)))

  (use-package embark
    :demand t
    :after avy
    :general
    ("C-c a" 'embark-act)
    ("C-c d" 'embark-dwim)
    :config
    (define-key embark-identifier-map "r" 'eglot-rename)
    (define-key embark-identifier-map "i" 'eglot-code-actions)
    (push 'embark--allow-edit
          (alist-get 'eglot-rename embark-target-injection-hooks))
    (push 'embark--ignore-target
          (alist-get 'eglot-code-actions embark-target-injection-hooks))
    :init
    ;; Add the option to run embark when using avy
    (defun bedrock/avy-action-embark (pt)
      (unwind-protect
      	(save-excursion
      	  (goto-char pt)
      	  (embark-act))
        (select-window
         (cdr (ring-ref avy-ring 0))))
      t)

    ;; After invoking avy-goto-char-timer, hit "." to run embark at the next
    ;; candidate you select
    (setf (alist-get ?. avy-dispatch-alist) 'bedrock/avy-action-embark))
#+END_SRC

*** Minibuffer
:PROPERTIES:
:ID:       2510CFE9-62F4-451B-8971-1CF2452B4A87
:CUSTOM_ID: minibuffer
:END:
#+BEGIN_SRC emacs-lisp
  ;; For help, see: https://www.masteringemacs.org/article/understanding-minibuffer-completion
  (setopt completion-cycle-threshold 1)                  ; TAB cycles candidates
  (setopt completions-detailed t)                        ; Show annotations
  (setopt tab-always-indent 'complete)                   ; When I hit TAB, try to complete, otherwise, indent

  (setopt completion-auto-help 'always)                  ; Open completion always; `lazy' another option
  (setopt completions-max-height 20)                     ; This is arbitrary
  (setopt completions-detailed t)
  (setopt completions-format 'one-column)
  (setopt completions-group t)
  (setopt completion-auto-select 'second-tab)            ; Much more eager

  (keymap-set minibuffer-mode-map "TAB" 'minibuffer-complete) ; TAB acts more like how it does in the shell
#+END_SRC

Vertico provides a vertical completion UI for the minibuffer.
#+BEGIN_SRC emacs-lisp
  (use-package vertico
    :init
    ;; You'll want to make sure that e.g. fido-mode isn't enabled
    (vertico-mode)
    :custom
    ;; Enable cycling through candidates
    (vertico-cycle t)
    ;; Increase the number of visible candidates to see more context
    (vertico-count 20))

  (use-package vertico-directory
    :straight nil
    :ensure nil
    :after vertico
    :general (:keymaps 'vertico-map
    	      "C-j" 'vertico-directory-enter
    	      "C-l" 'vertico-directory-up
    	      "DEL" 'vertico-directory-delete-char
    	      "M-DEL" 'vertico-directory-delete-word
    	      ;; Fix pixel-scroll-precision-mode conflicts
    	      "<remap> <pixel-scroll-interpolate-up>" 'vertico-scroll-down
    	      "<remap> <pixel-scroll-interpolate-down>" 'vertico-scroll-up))

  #+END_SRC

Marginalia adds helpful documentation annotations to the minibuffer margins.
#+BEGIN_SRC emacs-lisp
  (use-package marginalia
    :config
    (marginalia-mode))
#+END_SRC

*** Completion
:PROPERTIES:
:ID:       C4C77C86-7E03-4C26-92D9-8A909D35A157
:CUSTOM_ID: completion
:END:
#+BEGIN_SRC emacs-lisp
  ;; Popup completion-at-point
  (use-package corfu
    :straight (:files (:defaults "extensions/*"))
    :init
    (global-corfu-mode)
    (corfu-history-mode)
    (corfu-popupinfo-mode)
    :config
    (setq completion-ignore-case t)
    :general
    (:keymaps 'corfu-map
              "SPC" 'corfu-insert-separator
              "C-n" 'corfu-next
              "C-p" 'corfu-previous
              ;; Fix pixel-scroll-precision-mode conflicts
              "<remap> <pixel-scroll-interpolate-up>" 'corfu-scroll-down
              "<remap> <pixel-scroll-interpolate-down>" 'corfu-scroll-up))

  ;; Part of corfu
  (use-package corfu-popupinfo
    :straight nil
    :ensure nil
    :after corfu
    :hook (corfu-mode . corfu-popupinfo-mode)
    :custom
    (corfu-popupinfo-delay '(0.25 . 0.1))
    (corfu-popupinfo-hide nil)
    :config
    (corfu-popupinfo-mode))

  ;; Make corfu popup come up in terminal overlay
  (use-package corfu-terminal
    :if (not (display-graphic-p))
    :config
    (corfu-terminal-mode))

  (use-package corfu-candidate-overlay
    :straight (:type git
                     :repo "https://code.bsdgeek.org/adam/corfu-candidate-overlay"
                     :files (:defaults "*.el"))
    :after corfu
    :general
    ("C-<tab>" 'completion-at-point
     "C-<iso-lefttab>" 'corfu-candidate-overlay-complete-at-point)
    :config
    ;; enable corfu-candidate-overlay mode globally
    ;; this relies on having corfu-auto set to nil
    (corfu-candidate-overlay-mode +1))

  ;; Fancy completion-at-point functions; there's too much in the cape package to
  ;; configure here; dive in when you're comfortable!
  (use-package cape
    :init
    (add-to-list 'completion-at-point-functions #'cape-dabbrev)
    (add-to-list 'completion-at-point-functions #'cape-file))

  ;; Pretty icons for corfu
  (use-package kind-icon
    :if (display-graphic-p)
    :after corfu
    :config
    (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))
  #+END_SRC

Orderless describes itself as a 'completion style' which means that it controls how Emacs filters
and presents completion candidates.
#+BEGIN_SRC emacs-lisp
  (use-package orderless
    :config
    (setq completion-styles '(orderless)))
#+END_SRC

*** Bookmarks
:PROPERTIES:
:ID:       07C52099-B065-485D-A22A-832A8E471A76
:CUSTOM_ID: bookmarks
:END:
#+BEGIN_SRC emacs-lisp
  ;; disable annoying bookmark icons
  (setq bookmark-fringe-mark nil)

  (use-package dogears
    :general
    (my-leader-def
      "e" '(hydra-dogears/body :wk "dogears"))
    ("M-g d" 'dogears-go)
    ("M-g M-b" 'dogears-back)
    ("M-g M-f" 'dogears-forward)
    ("M-g M-d" 'dogears-list)
    :config
    (setq dogears-idle 2
          dogears-limit 300)
    (add-to-list 'dogears-functions 'kill-ring-save)
    ;;(add-hook 'dogears-hooks 'after-change-functions)
    (dogears-mode)
    :hydra (hydra-dogears (:column 2)
                          ("p" dogears-back "Back")
                          ("n" dogears-forward "Forward")
                          ("g" dogears-go "Go" :exit t)
                          ("l" dogears-list "List: ":bind nil :exit t)
                          ("q" nil "quit")))
#+END_SRC

*** Help
:PROPERTIES:
:ID:       7CAA4640-4E86-436F-B058-2BC5FF7A2CBF
:CUSTOM_ID: help
:END:
[[https://github.com/Wilfred/helpful][~helpful~]] provides a slightly nicer interface to the built-in help files.
#+BEGIN_SRC emacs-lisp
  (use-package helpful
    :general
    ("C-h f" 'helpful-callable)
    ("C-h F" 'helpful-function)
    ("C-h M" 'helpful-macro)
    ("C-h x" 'helpful-command)
    ("C-h k" 'helpful-key)
    ("C-h v" 'helpful-variable)
    ("C-h C-d" 'helpful-at-point))
#+END_SRC

*** Beacon
:PROPERTIES:
:CUSTOM_ID: beacon
:ID:       f0a86a96-4f51-432c-9092-d89cdcbdd1cc
:END:
#+begin_src emacs-lisp
  (use-package beacon
    :config
    (setq beacon-color "#666600")
    (beacon-mode 1))
#+end_src

*** ibuffer
:PROPERTIES:
:ID:       D74C6A06-0355-4FF4-AB79-C19A85A586CB
:CUSTOM_ID: ibuffer
:END:


#+begin_src emacs-lisp
  (use-package ibuffer
    :straight nil
    :general
    ("C-x C-b" 'ibuffer)
    (:keymaps 'ibuffer-mode-map "." 'hydra-ibuffer-main/body)
    :hydra (hydra-ibuffer-main (:color pink :hint nil)
                               "
                ^Mark^         ^Actions^         ^View^          ^Select^              ^Navigation^
                _m_: mark      _D_: delete       _g_: refresh    _q_: quit             _i_:   ↑    _n_
                _u_: unmark    _s_: save marked  _S_: sort       _TAB_: toggle         _RET_: visit
                _*_: specific  _a_: all actions  _/_: filter     _O_: other window     _e_:   ↓    _o_
                _t_: toggle    _._: toggle hydra _H_: help       C-o other win no-select
                "
                               ("m" ibuffer-mark-forward)
                               ("u" ibuffer-unmark-forward)
                               ("*" hydra-ibuffer-mark/body :color blue)
                               ("t" ibuffer-toggle-marks)

                               ("D" ibuffer-do-delete)
                               ("s" ibuffer-do-save)
                               ("a" hydra-ibuffer-action/body :color blue)

                               ("g" ibuffer-update)
                               ("S" hydra-ibuffer-sort/body :color blue)
                               ("/" hydra-ibuffer-filter/body :color blue)
                               ("H" describe-mode :color blue)

                               ("n" ibuffer-backward-filter-group)
                               ("i" ibuffer-backward-line)
                               ("o" ibuffer-forward-filter-group)
                               ("e" ibuffer-forward-line)
                               ("RET" ibuffer-visit-buffer :color blue)

                               ("TAB" ibuffer-toggle-filter-group)

                               ("O" ibuffer-visit-buffer-other-window :color blue)
                               ("q" quit-window :color blue)
                               ("." nil :color blue))

    :hydra (hydra-ibuffer-mark (:color teal :columns 5
                                       :after-exit (hydra-ibuffer-main/body))
                               "Mark"
                               ("*" ibuffer-unmark-all "unmark all")
                               ("M" ibuffer-mark-by-mode "mode")
                               ("m" ibuffer-mark-modified-buffers "modified")
                               ("u" ibuffer-mark-unsaved-buffers "unsaved")
                               ("s" ibuffer-mark-special-buffers "special")
                               ("r" ibuffer-mark-read-only-buffers "read-only")
                               ("/" ibuffer-mark-dired-buffers "dired")
                               ("e" ibuffer-mark-dissociated-buffers "dissociated")
                               ("h" ibuffer-mark-help-buffers "help")
                               ("z" ibuffer-mark-compressed-file-buffers "compressed")
                               ("b" hydra-ibuffer-main/body "back" :color blue))

    :hydra (hydra-ibuffer-action (:color teal :columns 4
                                         :after-exit
                                         (if (eq major-mode 'ibuffer-mode)
                                             (hydra-ibuffer-main/body)))
                                 "Action"
                                 ("A" ibuffer-do-view "view")
                                 ("E" ibuffer-do-eval "eval")
                                 ("F" ibuffer-do-shell-command-file "shell-command-file")
                                 ("I" ibuffer-do-query-replace-regexp "query-replace-regexp")
                                 ("H" ibuffer-do-view-other-frame "view-other-frame")
                                 ("N" ibuffer-do-shell-command-pipe-replace "shell-cmd-pipe-replace")
                                 ("M" ibuffer-do-toggle-modified "toggle-modified")
                                 ("O" ibuffer-do-occur "occur")
                                 ("P" ibuffer-do-print "print")
                                 ("Q" ibuffer-do-query-replace "query-replace")
                                 ("R" ibuffer-do-rename-uniquely "rename-uniquely")
                                 ("T" ibuffer-do-toggle-read-only "toggle-read-only")
                                 ("U" ibuffer-do-replace-regexp "replace-regexp")
                                 ("V" ibuffer-do-revert "revert")
                                 ("W" ibuffer-do-view-and-eval "view-and-eval")
                                 ("X" ibuffer-do-shell-command-pipe "shell-command-pipe")
                                 ("b" nil "back"))

    :hydra (hydra-ibuffer-sort (:color amaranth :columns 3)
                               "Sort"
                               ("i" ibuffer-invert-sorting "invert")
                               ("a" ibuffer-do-sort-by-alphabetic "alphabetic")
                               ("v" ibuffer-do-sort-by-recency "recently used")
                               ("s" ibuffer-do-sort-by-size "size")
                               ("f" ibuffer-do-sort-by-filename/process "filename")
                               ("m" ibuffer-do-sort-by-major-mode "mode")
                               ("b" hydra-ibuffer-main/body "back" :color blue))

    :hydra (hydra-ibuffer-filter (:color amaranth :columns 4)
                                 "Filter"
                                 ("m" ibuffer-filter-by-used-mode "mode")
                                 ("M" ibuffer-filter-by-derived-mode "derived mode")
                                 ("n" ibuffer-filter-by-name "name")
                                 ("c" ibuffer-filter-by-content "content")
                                 ("e" ibuffer-filter-by-predicate "predicate")
                                 ("f" ibuffer-filter-by-filename "filename")
                                 (">" ibuffer-filter-by-size-gt "size")
                                 ("<" ibuffer-filter-by-size-lt "size")
                                 ("/" ibuffer-filter-disable "disable")
                                 ("b" hydra-ibuffer-main/body "back" :color blue))
    :config
    (defun my/setup-ibuffer ()
    "Setup ibuffer with projectile groups, custom format, and icons."
    (ibuffer-projectile-set-filter-groups)
    (all-the-icons-ibuffer-mode 1)
    ;; Set format AFTER icons mode is active
    (setq ibuffer-formats
          '((mark modified read-only locked " "
                  (icon 2 2) ; Keep the icon column that all-the-icons-ibuffer adds
                  (name 50 50 :left :elide) " "
                  (size-h 9 -1 :right) " " ; Use size-h (human readable) that icons mode provides
                  (mode+ 16 16 :left :elide) " " ; Use mode+ that icons mode provides
                  filename-and-process+))) ; Use filename-and-process+ that icons mode provides
    ;; Force a refresh to apply the new format
    (ibuffer-update nil t))
    :hook
    (ibuffer-mode . my/setup-ibuffer))

  (use-package ibuffer-projectile
    :ensure t
    :after ibuffer)

  (use-package all-the-icons-ibuffer
    :ensure t
    :after ibuffer)

#+end_src

** Projects
:PROPERTIES:
:ID:       320248d2-2db0-4a7a-8500-a9515ca2541a
:CUSTOM_ID: projects
:END:

#+begin_src emacs-lisp

  ;; TODO experiment with this!
  (use-package fixmee)

  (use-package projectile
    :ensure t
    :init
    (projectile-mode +1)
    :general
    (my-leader-def "p" '(hydra-projectile/body :wk "projectile"))
    :custom
    (projectile-project-search-path '("~/dotfiles/" "~/notebook/"))
    (projectile-enable-caching 'persistent)
    :hydra
    (hydra-projectile (:color blue :hint nil :idle 0.4)
        "
                                                                    ╭────────────┐
    Files             Search          Buffer             Do         │ Projectile │
  ╭─────────────────────────────────────────────────────────────────┴────────────╯
    [_f_] file          [_r_] ripgrep     [_b_] switch         [_g_] magit
    [_l_] file dwim     [_A_] grep        [_v_] show all       [_p_] commander
    [_r_] recent file   [_s_] occur       [_V_] ibuffer        [_i_] info
    [_d_] dir           [_S_] replace     [_K_] kill all
    [_o_] other         [_t_] find tag
    [_u_] test file     [_T_] make tags
    [_h_] root
                                                                        ╭────────┐
    Other Window      Run             Cache              Do             │ Fixmee │
  ╭──────────────────────────────────────────────────╯ ╭────────────────┴────────╯
    [_F_] file          [_U_] test        [_kc_] clear         [_x_] TODO & FIXME
    [_L_] dwim          [_m_] compile     [_kk_] add current   [_X_] toggle
    [_D_] dir           [_c_] shell       [_ks_] cleanup
    [_O_] other         [_C_] command     [_kd_] remove
    [_B_] buffer
  --------------------------------------------------------------------------------
        "
        ("q" nil "quit")
        ("r"   projectile-ripgrep)
        ("A"   projectile-grep)
        ("b"   projectile-switch-to-buffer)
        ("B"   projectile-switch-to-buffer-other-window)
        ("c"   projectile-run-async-shell-command-in-root)
        ("C"   projectile-run-command-in-root)
        ("d"   projectile-find-dir)
        ("D"   projectile-find-dir-other-window)
        ("f"   projectile-find-file)
        ("F"   projectile-find-file-other-window)
        ("g"   projectile-vc)
        ("h"   projectile-dired)
        ("i"   projectile-project-info)
        ("kc"  projectile-invalidate-cache)
        ("kd"  projectile-remove-known-project)
        ("kk"  projectile-cache-current-file)
        ("K"   projectile-kill-buffers)
        ("ks"  projectile-cleanup-known-projects)
        ("l"   projectile-find-file-dwim)
        ("L"   projectile-find-file-dwim-other-window)
        ("m"   projectile-compile-project)
        ("o"   projectile-find-other-file)
        ("O"   projectile-find-other-file-other-window)
        ("p"   projectile-commander)
        ;("r"   projectile-recentf)
        ("s"   projectile-multi-occur)
        ("S"   projectile-replace)
        ("t"   projectile-find-tag)
        ("T"   projectile-regenerate-tags)
        ("u"   projectile-find-test-file)
        ("U"   projectile-test-project)
        ("v"   projectile-display-buffer)
        ("V"   projectile-ibuffer)
        ("X"   fixmee-mode)
        ("x"   fixmee-view-listing))
    )

  (use-package consult-projectile)
#+end_src

** Filesystem
:PROPERTIES:
:CUSTOM_ID: filesystem
:END:
*** Dired
:PROPERTIES:
:ID:       39BCEA77-6E29-467F-AC8D-0A2C332EA43D
:CUSTOM_ID: dired
:END:
~dired~ is basically a file explorer.
#+BEGIN_SRC emacs-lisp
  (use-package dired
    :straight nil
    :ensure nil
    :defer t
    :general
    (my-leader-def "d" 'dired)
    (dired-mode-map "c" 'dired-do-copy)
    (dired-mode-map "r" 'dired-do-rename)
    (dired-mode-map "." 'hydra-dired/body)
    :hydra
    (hydra-dired (:hint nil :color pink)
                 "
  _+_ mkdir          _v_iew           _m_ark             _(_ details        _i_nsert-subdir    wdired
  _c_opy             _O_ view other   _U_nmark all       _)_ omit-mode      _$_ hide-subdir    C-x C-q : edit
  _D_elete           _o_pen other     _u_nmark           _l_ redisplay      _w_ kill-subdir    C-c C-c : commit
  _r_ename           _M_ chmod        _t_oggle           _g_ revert buf     _e_ ediff          C-c ESC : abort
  _Y_ rel symlink    _G_ chgrp        _E_xtension mark   _s_ort             _=_ pdiff
  _S_ymlink          ^ ^              _F_ind marked      _._ toggle hydra   \\ flyspell
  _R_sync            ^ ^              ^ ^                ^ ^                _?_ summary
  _z_ compress-file  _A_ find regexp
  _Z_ compress       _Q_ repl regexp
  T - tag prefix
  "
                 ("\\" dired-do-ispell)
                 ("(" dired-hide-details-mode)
                 (")" dired-omit-mode)
                 ("+" dired-create-directory)
                 ("=" diredp-ediff)         ;; smart diff
                 ("?" dired-summary)
                 ("$" diredp-hide-subdir-nomove)
                 ("A" dired-do-find-regexp)
                 ("c" dired-do-copy)        ;; Copy all marked files
                 ("D" dired-do-delete)
                 ("E" dired-mark-extension)
                 ("e" dired-ediff-files)
                 ("F" dired-do-find-marked-files)
                 ("G" dired-do-chgrp)
                 ("g" revert-buffer)        ;; read all directories again (refresh)
                 ("i" dired-maybe-insert-subdir)
                 ("l" dired-do-redisplay)   ;; relist the marked or singel directory
                 ("M" dired-do-chmod)
                 ("m" dired-mark)
                 ("O" dired-display-file)
                 ("o" dired-find-file-other-window)
                 ("Q" dired-do-find-regexp-and-replace)
                 ("r" dired-do-rename)
                 ("R" dired-do-rsynch)
                 ("S" dired-do-symlink)
                 ("s" dired-sort-toggle-or-edit)
                 ("t" dired-toggle-marks)
                 ("U" dired-unmark-all-marks)
                 ("u" dired-unmark)
                 ("v" dired-view-file)      ;; q to exit, s to search, = gets line #
                 ("w" dired-kill-subdir)
                 ("Y" dired-do-relsymlink)
                 ("z" diredp-compress-this-file)
                 ("Z" dired-do-compress)
                 ("q" nil)
                 ("." nil :color blue)))

  ;; Colourful columns.
  (use-package diredfl
    :after dired
    :config
    (diredfl-global-mode +1))

  (use-package dired-git-info
    :hook (dired-after-readin . dired-git-info-auto-enable)
    :config
    (setq dgi-auto-hide-details-p nil))

  (use-package all-the-icons-dired
    :after all-the-icons
    :hook (dired-mode . all-the-icons-dired-mode))
#+END_SRC
** Editing
:PROPERTIES:
:CUSTOM_ID: editing
:END:
*** Undo
:PROPERTIES:
:ID:       B74C61C8-46C8-4BCB-BCCB-AE63283C1C5C
:CUSTOM_ID: undo
:END:
[[https://github.com/emacsmirror/undo-fu][~undo-fu~]] improves the default undo experience.
#+BEGIN_SRC emacs-lisp
  (use-package undo-fu
    :general
    ("C-z" 'undo-fu-only-undo)
    ("C-S-z" 'undo-fu-only-redo))
#+END_SRC

[[https://github.com/casouri/vundo][~vundo~]] displays a nice branching undo tree built on top of the default undo system.
#+BEGIN_SRC emacs-lisp
  (use-package vundo
    :config
    ;; use a nicer unicode font to display the tree
    (setq vundo-glyph-alist vundo-unicode-symbols))
#+END_SRC
*** Fill/Unfill Paragraph
:PROPERTIES:
:ID:       AD567D1B-47AC-456E-A711-87039063F48C
:CUSTOM_ID: fillunfill-paragraph
:END:
[[https://github.com/purcell/unfill][~unfill~]] is an ideal little helper function to Emacs'
built-in ~fill~ function.
#+begin_src emacs-lisp
  (use-package unfill
    :general
    ("M-q" 'unfill-toggle))
#+end_src
*** Spelling
:PROPERTIES:
:ID:       05DF5D12-0C29-44DD-88A5-F25762BC4F85
:CUSTOM_ID: spelling
:END:

Moving back to ~flyspell~ for now.
#+begin_src  emacs-lisp
  (use-package flyspell
    :straight nil
    :ensure nil
    :hook ((text-mode . flyspell-mode)
           (prog-mode . flyspell-prog-mode)
           (org-mode . flyspell-mode)))

  (use-package flyspell-correct
    :after flyspell
    :bind (:map flyspell-mode-map ("C-;" . flyspell-correct-wrapper)))

  (use-package flyspell-correct-popup
    :after flyspell-correct)

  (use-package flyspell-correct-avy-menu
    :after flyspell-correct)

  (defun avy-action-flyspell (pt)
    (save-excursion
      (goto-char pt)
      (when (require 'flyspell nil t)
        (flyspell-auto-correct-word)))
    (select-window
     (cdr (ring-ref avy-ring 0)))
    t)

  ;; Bind to semicolon (flyspell uses C-;)
  (setf (alist-get ?\; avy-dispatch-alist) 'avy-action-flyspell)
#+end_src
*** Rectangles
:PROPERTIES:
:ID:       85B5D4E0-B5D3-408D-A41D-A2BC44E3F029
:CUSTOM_ID: rectangles
:END:
This is a hydra for working with the ~rectangle~ commands.

#+BEGIN_SRC emacs-lisp
  (my-leader-def "R" '(hydra-rectangle/body :wk "rectangle"))
  (defhydra hydra-rectangle (:body-pre (rectangle-mark-mode 1)
                                       :color pink
                                       :hint nil
                                       :post (deactivate-mark))
    "
      ^_i_^       _w_ copy      _O_pen       _N_umber-lines
    _n_   _o_     _y_ank        _t_ype       _E_xchange-point
      ^_e_^       _d_ kill      _c_lear      _r_eset-region-mark
    ^^^^          _u_ndo        _q_uit       ^ ^
    "
    ("i" rectangle-previous-line)
    ("e" rectangle-next-line)
    ("n" rectangle-backward-char)
    ("o" rectangle-forward-char)
    ("d" kill-rectangle)                    ;; C-x r k
    ("y" yank-rectangle)                    ;; C-x r y
    ("w" copy-rectangle-as-kill)            ;; C-x r M-w
    ("O" open-rectangle)                    ;; C-x r o
    ("t" string-rectangle)                  ;; C-x r t
    ("c" clear-rectangle)                   ;; C-x r c
    ("E" rectangle-exchange-point-and-mark) ;; C-x C-x
    ("N" rectangle-number-lines)            ;; C-x r N
    ("r" (if (region-active-p)
             (deactivate-mark)
           (rectangle-mark-mode 1)))
    ("u" undo nil)
    ("q" nil))
#+END_SRC

*** Move to beginning of line
:PROPERTIES:
:ID:       E1E19C91-7B99-452A-8FB2-6AE35A2DF2CD
:CUSTOM_ID: move-to-beginning-of-line
:END:
This snippet provides smarter moving to the beginning of the line. Copied from [[https://emacsredux.com/blog/2013/05/22/smarter-navigation-to-the-beginning-of-a-line/][EmacsRedux]].
#+BEGIN_SRC emacs-lisp
  (defun smarter-move-beginning-of-line (arg)
    "Move point back to indentation of beginning of line.

    Move point to the first non-whitespace character on this line.
    If point is already there, move to the beginning of the line.
    Effectively toggle between the first non-whitespace character and
    the beginning of the line.

    If ARG is not nil or 1, move forward ARG - 1 lines first.  If
    point reaches the beginning or end of the buffer, stop there."
    (interactive "^p")
    (setq arg (or arg 1))

    ;; Move lines first
    (when (/= arg 1)
      (let ((line-move-visual nil))
        (forward-line (1- arg))))

    (let ((orig-point (point)))
      (back-to-indentation)
      (when (= orig-point (point))
        (move-beginning-of-line 1))))

  ;; remap C-a to `smarter-move-beginning-of-line'
  (general-define-key "C-a" 'smarter-move-beginning-of-line)
#+END_SRC
*** CSV
:PROPERTIES:
:ID:       05DE8310-10CB-42D1-BF55-F9B07FAB76C4
:CUSTOM_ID: csv
:END:
#+begin_src emacs-lisp
    (use-package csv-mode
      :config
      (setq csv-separators '("," "|")))


  ;; (unless (package-installed-p 'vc-use-package)
  ;;   (package-vc-install "https://github.com/slotThe/vc-use-package"))
  ;; (require 'vc-use-package)

  ;;   (use-package rainbow-csv
  ;;     :vc (:fetcher github :repo  emacs-vs/rainbow-csv))
#+end_src
*** PDFs
:PROPERTIES:
:ID:       7f8ae549-ab55-43a1-b075-a9e52271cebc
:CUSTOM_ID: pdfs
:END:
#+begin_src emacs-lisp
  (use-package pdf-tools)
#+end_src

** Searching
:PROPERTIES:
:ID:       1B7EA834-0732-4CAF-B280-0470E5489569
:CUSTOM_ID: searching
:END:
#+begin_src emacs-lisp
  (use-package rg
    :ensure t
    :config (rg-enable-menu)
    (add-to-list 'rg-finish-functions
               (lambda (buffer status)
                 "Move the cursor to the ripgrep results window."
                 (pop-to-buffer "*rg*")))
    :init (setq ripgrep-arguments "--ignore-case"))
#+end_src

This is a useful way to add saved project searches. Taken from https://takeonrules.com/2024/03/02/an-evening-reading-documentation-leads-to-discovery/.
#+begin_src emacs-lisp
(when (f-dir-p "~/dotfiles/")
    (rg-define-search rg-projects-dotfiles
      "Search Dotfiles."
      :dir "~/dotfiles/"
      :files "*.*"
      :menu ("Projects" "d" "Dotfiles")))
#+end_src
** Window Management
:PROPERTIES:
:ID:       33BDFB30-8D15-49B7-87EC-ED43951373DF
:CUSTOM_ID: window-management
:END:

[[https://github.com/abo-abo/ace-window][~ace-window~]] allows for easy switching between windows within a frame, splitting windows and moving and
copying windows.
#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :general
    ("C-x o" 'ace-window)
    :config
    (setq aw-keys '(?a ?r ?s ?t ?n ?e ?i ?o)))
#+END_SRC

[[https://github.com/dimitri/switch-window][~switch-window~]] allows for easy switching between windows within a frame. It's slightly better than
~ace-window~ for that basic task as the labels for the windows are larger. However, ~ace-window~ is
worth keeping around for other functionality.
#+BEGIN_SRC emacs-lisp
  (use-package switch-window
    :general
    ("M-o" 'switch-window)
    :config
    (setq switch-window-shortcut-style 'qwerty))
#+END_SRC


[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Window-Convenience.html#index-winner_002dmode][~winner-mode~]] tracks changes in window configuration for a frame so that they can be undone or
redone.
#+BEGIN_SRC emacs-lisp
  (use-package winner
    :commands winner-mode
    :init (winner-mode t))
#+END_SRC

These are various functions for manipulating window size.
#+BEGIN_SRC emacs-lisp
  (defun hydra-move-splitter-left (delta)
    "Move window splitter left."
    (interactive "p")
    (let ((windmove-wrap-around nil))
      (if (windmove-find-other-window 'right)
          (shrink-window-horizontally delta)
        (enlarge-window-horizontally delta))))

  (defun hydra-move-splitter-right (delta)
    "Move window splitter right."
    (interactive "p")
    (let ((windmove-wrap-around nil))
      (if (windmove-find-other-window 'right)
          (enlarge-window-horizontally delta)
        (shrink-window-horizontally delta))))

  (defun hydra-move-splitter-up (delta)
    "Move window splitter up."
    (interactive "p")
    (let ((windmove-wrap-around nil))
      (if (windmove-find-other-window 'up)
          (enlarge-window delta)
        (shrink-window delta))))

  (defun hydra-move-splitter-down (delta)
    "Move window splitter down."
    (interactive "p")
    (let ((windmove-wrap-around nil))
      (if (windmove-find-other-window 'up)
          (shrink-window delta)
        (enlarge-window delta))))
#+END_SRC

Now we've got a hydra to make the various window management functions easily accessible.
#+BEGIN_SRC emacs-lisp
  (defhydra hydra-window-delux (:hint nil)
    "
      ^Movement^        ^Split^          ^Switch^            ^Resize^
      -------------------------------------------------------------------
      _n_ ←             _r_ight          _b_uffer            _l_ X←
      _e_ ↓             _d_own           _f_ind files        _u_ X↓
      _i_ ↑             _z_ undo         _a_ce 1             _y_ X↑
      _o_ →             _Z_ reset        _s_wap              _'_ X→
      _F_ollow          _D_lt Other      ^ ^                 _m_aximize
      _q_ quit          _O_nly this      _c_lose             _=_ balance
      "
    ;; Movement
    ("n" windmove-left )
    ("e" windmove-down )
    ("i" windmove-up )
    ("o" windmove-right )
    ("F" follow-mode)

    ;; Resize
    ("l" hydra-move-splitter-left)
    ("u" hydra-move-splitter-down)
    ("y" hydra-move-splitter-up)
    ("'" hydra-move-splitter-right)
    ("m" ace-maximize-window)
    ("=" balance-windows)

    ;; Split
    ("r" (lambda ()
           (interactive)
           (split-window-right)
           (windmove-right)))
    ("d" (lambda ()
           (interactive)
           (split-window-below)
           (windmove-down)))
    ("z" (progn
           (winner-undo)
           (setq this-command 'winner-undo)))
    ("Z" winner-redo)
    ("D" (lambda ()
           (interactive)
           (ace-window 16)
           (add-hook 'ace-window-end-once-hook
                     'hydra-window/body)))
    ("O" delete-other-windows)

    ;; Switch
    ("b" consult-buffer)
    ("f" find-files)
    ("a" (lambda ()
           (interactive)
           (ace-window 1)
           (add-hook 'ace-window-end-once-hook
                     'hydra-window/body)))
    ("s" (lambda ()
           (interactive)
           (ace-window 4)
           (add-hook 'ace-window-end-once-hook
                     'hydra-window/body)))
    ("c" delete-window)

    ("q" nil))
  (my-leader-def
    "w" '(hydra-window-delux/body :wk "windows"))
#+END_SRC

** Software Development
:PROPERTIES:
:CUSTOM_ID: software-development
:END:
*** Treesitter Setup
:PROPERTIES:
:ID:       199394FB-985F-4076-BEF4-2A3139FFFCB9
:CUSTOM_ID: treesitter-setup
:END:
#+BEGIN_SRC emacs-lisp
  (use-package emacs
    :config
    ;; Treesitter config
    (setq treesit-language-source-alist
  	'((bash "https://github.com/tree-sitter/tree-sitter-bash")
  	  (cmake "https://github.com/uyha/tree-sitter-cmake")
  	  (css "https://github.com/tree-sitter/tree-sitter-css")
  	  (elisp "https://github.com/Wilfred/tree-sitter-elisp")
  	  (go "https://github.com/tree-sitter/tree-sitter-go")
  	  (gomod "https://github.com/camdencheek/tree-sitter-go-mod")
  	  (dockerfile "https://github.com/camdencheek/tree-sitter-dockerfile")
  	  (html "https://github.com/tree-sitter/tree-sitter-html")
            (java "https://github.com/tree-sitter/tree-sitter-java")
  	  (javascript "https://github.com/tree-sitter/tree-sitter-javascript" "master" "src")
  	  (json "https://github.com/tree-sitter/tree-sitter-json")
  	  (make "https://github.com/alemuller/tree-sitter-make")
  	  (markdown "https://github.com/ikatyang/tree-sitter-markdown")
  	  (python "https://github.com/tree-sitter/tree-sitter-python")
            (rust "https://github.com/tree-sitter/tree-sitter-rust")
  	  (toml "https://github.com/tree-sitter/tree-sitter-toml")
            (rust "https://github.com/tree-sitter/tree-sitter-rust")
  	  (tsx "https://github.com/tree-sitter/tree-sitter-typescript" "master" "tsx/src")
  	  (typescript "https://github.com/tree-sitter/tree-sitter-typescript" "master" "typescript/src")
  	  (yaml "https://github.com/ikatyang/tree-sitter-yaml")))
    ;; Tell Emacs to prefer the treesitter mode
    ;; You'll want to run the command `M-x treesit-install-language-grammar' before editing.
    (setq major-mode-remap-alist
  	'((yaml-mode . yaml-ts-mode)
  	  (bash-mode . bash-ts-mode)
  	  (go-mode . go-ts-mode)
            (java-mode . java-ts-mode)
  	  (js2-mode . js-ts-mode)
  	  (typescript-mode . typescript-ts-mode)
  	  (json-mode . json-ts-mode)
  	  (css-mode . css-ts-mode)
  	  (python-mode . python-ts-mode)))
    )

  (use-package treesit-fold
    :straight (treesit-fold :type git :host github :repo "emacs-tree-sitter/treesit-fold")
    :config
    (setq global-treesit-fold-indicator-mode t))

  (use-package corral)

  (use-package combobulate
    :custom
    ;; You can customize Combobulate's key prefix here.
    ;; Note that you may have to restart Emacs for this to take effect!
    (combobulate-key-prefix "C-c o")
    :hook ((prog-mode . combobulate-mode))
    ;; Amend this to the directory where you keep Combobulate's source
    ;; code.
    :load-path ("path-to-git-checkout-of-combobulate"))

  (use-package expreg
    :general
    ("M-<" 'expreg-contract)
    ("M->" 'expreg-expand))

  (use-package rainbow-delimiters)
#+END_SRC
*** Git
:PROPERTIES:
:ID:       D2862523-93E3-4F58-B975-0AAB2F0955FA
:CUSTOM_ID: git
:END:
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :general
    ("C-x g" 'magit-status)
    (my-leader-def
      "g" '(hydra-my-git-menu/body :wk "git"))
    :config
    ;; This sets Magit to use the fullframe
    ;; (setq magit-display-buffer-function #'magit-display-buffer-fullframe-status-v1)
    (defun my/magit-yank-branch-name ()
      "Show the current branch in the echo-area and add it to the `kill-ring'."
      (interactive)
      (let ((branch (magit-get-current-branch)))
        (if branch
            (progn (kill-new branch)
                   (message "%s" branch))
          (user-error "There is not current branch")))))
#+END_SRC


[[https://github.com/emacsmirror/git-timemachine][~git-timemachine~]] allows you to walk through Git revisions of a file to view changes over time.
#+BEGIN_SRC emacs-lisp
  (use-package git-timemachine
    :defer t)
#+END_SRC

[[https://github.com/redguardtoo/vc-msg][~vc-msg~]] shows a popup containing the commit message that last affected the current line.
#+BEGIN_SRC emacs-lisp
  (use-package vc-msg
    :defer t)
#+END_SRC

[[https://github.com/dgutov/diff-hl][~diff-hl~]] shows icons on the buffer fringe for lines that have been added, removed or
modified.
#+BEGIN_SRC emacs-lisp
  (use-package diff-hl
    :hook (magit-post-refresh . diff-hl-magit-post-refresh)
    :config
    (diff-hl-flydiff-mode)
    (global-diff-hl-mode))

  (setq ediff-window-setup-function 'ediff-setup-windows-plain)
    #+END_SRC

[[https://github.com/rmuslimov/browse-at-remote][~browse-at-remote~]] allows for quick jumping to the relevant Github (or whatever) page corresponding
to the current file.
#+BEGIN_SRC emacs-lisp
  (use-package browse-at-remote)
 #+END_SRC

A nice Hydra menu to make things more accessible.
  #+BEGIN_SRC emacs-lisp
    (defhydra hydra-my-git-menu (:color blue
                                        :hint nil)
      "
              ^Navigate^        ^Action^               ^Info^
              ^^^^^^^^^^^^---------------------------------------------------
              _n_: next hunk    _s_: stage hunk        _d_: diff
              _p_: prev hunk    _S_: stage file        _c_: show commit
              ^ ^               _U_: unstage file      _g_: magit status
              ^ ^               ^ ^                    _t_: git timemachine
              _r_: browse at remote                  _b_: yank branch name
              "
      ("n" diff-hl-next-hunk :color red)
      ("p" diff-hl-previous-hunk :color red)
      ("s" diff-hl-stage-current-hunk)
      ("S" magit-stage-file)
      ("U" magit-unstage-file)
      ("c" vc-msg-show :color red)
      ("g" magit-status :exit t)
      ("d" magit-diff-buffer-file)
      ("t" git-timemachine :exit t)
      ("b" my/magit-yank-branch-name :exit t)
      ("r" browse-at-remote)
      ("q" nil :exit t))

    (defhydra hydra-my-git-timemachine-menu (:color blue)
      ("s" git-timemachine "start")
      ("j" git-timemachine-show-next-revision "next revision")
      ("k" git-timemachine-show-previous-revision "prev revision")
      ("c" git-timemachine-show-current-revision "curr revision")
      ("<ESC>" git-timemachine-show-current-revision "quit" :exit t))
      #+END_SRC

#+begin_src emacs-lisp

  (use-package smerge-mode
    :general
    (my-leader-def
      "s" '(smerge-hydra/body :wk "smerge"))
    :hydra
    (smerge-hydra
     (:color pink :hint nil :pre (smerge-mode 1) :post (smerge-auto-leave))
        "
  ^Move^       ^Keep^               ^Diff^                 ^Other^
  ^^-----------^^-------------------^^---------------------^^-------
  _n_ext       _b_ase               _<_: upper/base        _C_ombine
  _p_rev       _u_pper              _=_: upper/lower       _r_esolve
  ^^           _l_ower              _>_: base/lower        _k_ill current
  ^^           _a_ll                _R_efine
  ^^           ^ ^                  _E_diff
  "
        ("n" smerge-next)
        ("p" smerge-prev)
        ("b" smerge-keep-base)
        ("u" smerge-keep-upper)
        ("l" smerge-keep-lower)
        ("a" smerge-keep-all)
        ("\C-m" smerge-keep-current)
        ("<" smerge-diff-base-upper)
        ("=" smerge-diff-upper-lower)
        (">" smerge-diff-base-lower)
        ("R" smerge-refine)
        ("E" smerge-ediff)
        ("C" smerge-combine-with-next)
        ("r" smerge-resolve)
        ("k" smerge-kill-current)
        ("ZZ" (lambda ()
                (interactive)
                (save-buffer)
                (bury-buffer))
         "Save and bury buffer" :color blue)
        ("q" nil "cancel" :color blue)))


#+end_src
*** Flycheck
:PROPERTIES:
:ID:       ED7011C9-4F36-493B-9E80-BB3FF232FF5E
:CUSTOM_ID: flycheck
:END:

~flycheck~ operates on open buffers and integrates with eglot via flycheck-eglot for real-time LSP diagnostics.
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :general
    (my-leader-def
      "f" '(hydra-flycheck/body :wk "flycheck"))
    :hydra (hydra-flycheck (:hint nil :color green)
    "
    Flycheck & Linting (_q_uit)
    ──────────────────────────────────────────────────────────────────
    Check               Filters              Navigation           Project Lint
    ─────────────────   ──────────────────   ──────────────────   ──────────────────
    _c_heck buffer      _e_rrors only        _f_irst error        _g_o lint
    _l_ist errors       _w_arnings only      _n_ext error         _P_ython lint
    ^ ^                 _i_nfo only          _p_rev error         ^ ^
    "
    ;; Check
    ("c" consult-flycheck)
    ("l" flycheck-list-errors)

    ;; Filters
    ("e" (lambda () (interactive)
           (minibuffer-with-setup-hook (lambda () (insert "error "))
             (call-interactively #'consult-flycheck))))
    ("w" (lambda () (interactive)
           (minibuffer-with-setup-hook (lambda () (insert "warning "))
             (call-interactively #'consult-flycheck))))
    ("i" (lambda () (interactive)
           (minibuffer-with-setup-hook (lambda () (insert "info "))
             (call-interactively #'consult-flycheck))))

    ;; Navigation
    ("f" flycheck-first-error)
    ("n" flycheck-next-error)
    ("p" flycheck-previous-error)

    ;; Project Lint
    ("g" my/lint-golangci)
    ("P" my/lint-ruff)

    ("q" nil :exit t))
    :config
    (global-flycheck-mode +1)
    ;; Use built-in golangci-lint checker
    (when (executable-find "golangci-lint")
      (add-hook 'go-ts-mode-hook
                (lambda ()
                  (setq-local flycheck-checkers '(golangci-lint)
                              flycheck-golangci-lint-tests t))))
    )


  (use-package flycheck-eglot
    :after (flycheck eglot)
    :custom (flycheck-eglot-exclusive nil)
    :config
    (global-flycheck-eglot-mode 1))
  #+END_SRC

Use ~flycheck-pos-tip~ to show flycheck errors in popup tooltips.
  #+BEGIN_SRC emacs-lisp
  (use-package flycheck-pos-tip
    :after flycheck
    :config
    (flycheck-pos-tip-mode)
    (setq flycheck-pos-tip-max-width 80
          pos-tip-tab-width 4
          pos-tip-use-relative-coordinates t))

  (use-package consult-flycheck
    :after (flycheck eglot consult))

  (use-package flycheck-projectile
    :ensure t
    :after (flycheck projectile popwin)
    :config
    ;; Optional: If you use popwin for better popup window management
    (add-to-list 'popwin:special-display-config
                 `(,flycheck-projectile-error-list-buffer :regexp nil :dedicated t :position bottom :stick t :noselect nil)))

  ;; TODO explore this a bit
  (use-package popwin)

#+END_SRC
*** LSP Servers
:PROPERTIES:
:ID:       482ED4FE-7F7F-4D0E-A3F3-14CEC5372337
:CUSTOM_ID: lsp-servers
:END:

#+BEGIN_SRC emacs-lisp

  (use-package eglot
    :straight nil
    :general
    (my-leader-def "l" '(hydra-code/body :wk "code"))
    :hydra (hydra-code (:hint nil :color blue)
    "
    LSP Assistant (_q_uit)
    ──────────────────────────────────────────────────────────────────
    Navigation          LSP Actions          LSP Control
    ─────────────────   ──────────────────   ─────────────────────
    _d_efinition        _a_ctions            _R_estart LSP
    _I_mplementation    _r_ename             _t_oggle LSP
    _T_ype definition   _F_ormat             ^ ^
    _x_refs             _o_rganize+format    ^ ^
    _s_ymbols           _h_elp/docs          ^ ^
    "
    ;; Navigation
    ("d" xref-find-definitions)
    ("I" eglot-find-implementation)
    ("T" eglot-find-typeDefinition)
    ("x" xref-find-references)
    ("s" consult-eglot-symbols)

    ;; LSP Actions
    ("a" eglot-code-actions)
    ("r" eglot-rename)
    ("F" eglot-format-buffer)
    ("o" my/eglot-organize-imports-and-format)
    ("h" my/show-documentation-and-switch)

    ;; LSP Control
    ("R" eglot-reconnect)
    ("t" eglot-shutdown)

    ("q" nil :exit t))
    :hook
    ((go-ts-mode . eglot-ensure)
     (python-ts-mode . eglot-ensure)
     (terraform-mode . eglot-ensure)
     (java-ts-mode . eglot-ensure)
     (bash-ts-mode . eglot-ensure)
     (rust-ts-mode . eglot-ensure)
     (sh-mode . eglot-ensure))
    :custom
    ;; Performance tuning
    (eglot-send-changes-idle-time 0.1)
    (eglot-events-buffer-size 0)
    (eglot-sync-connect nil)
    (eglot-connect-timeout 10)
    (eglot-autoshutdown t)
    (eglot-confirm-server-initiated-edits nil)
    ;; activate Eglot in referenced non-project files
    (eglot-extend-to-xref t)
    ;; Better integration with flycheck
    (eglot-stay-out-of '())
    :config
    ;; massive perf boost---don't log every event
    (fset #'jsonrpc--log-event #'ignore)
    ;; Configure gopls with workspace diagnostics
    (add-to-list 'eglot-server-programs
                 `(go-ts-mode . ("gopls"
                                 :initializationOptions
                                 (:gofumpt t
                                  :local ""  ; Will be auto-detected from go.mod
                                  :analyses (:nilness t
                                             :unusedparams t
                                             :unusedwrite t
                                             :useany t)
                                  :staticcheck t
                                  :diagnosticsDelay "500ms"
                                  :annotations (:bounds t :escape t :inline t :nil t)
                                  :hints (:assignVariableTypes t
                                          :compositeLiteralFields t
                                          :compositeLiteralTypes t
                                          :constantValues t
                                          :functionTypeParameters t
                                          :parameterNames t
                                          :rangeVariableTypes t)
                                  :codelenses (:gc_details t
                                               :generate t
                                               :regenerate_cgo t
                                               :test t
                                               :tidy t
                                               :upgrade_dependency t
                                               :vendor t)))))
    ;; Configure Python LSP - use pyright for full language features + syntax checking
    ;; and let flycheck handle ruff for additional linting
    (add-to-list 'eglot-server-programs
                 `(python-ts-mode . ("pyright-langserver" "--stdio"))))


  ;; Enhanced eglot integration functions
  (defun my/eglot-organize-imports-and-format ()
    "Organize imports and format buffer using eglot."
    (interactive)
    (when (eglot-current-server)
      (condition-case err
          (call-interactively #'eglot-code-action-organize-imports)
        (error (message "No organize imports action available")))
      (call-interactively #'eglot-format-buffer)))

    ;; Custom documentation function that tries multiple approaches
  (defun my/show-documentation-and-switch ()
    "Show documentation in buffer and switch to it, trying multiple methods."
    (interactive)
    (cond
     ;; Try eglot hover documentation
     ((and (eglot-current-server) (eglot-managed-p))
      (let ((symbol (thing-at-point 'symbol)))
        (if symbol
            (progn
              ;; Force eldoc to run and populate buffer
              (eldoc-print-current-symbol-info)
              (sit-for 0.1) ; Give eldoc time to populate
              (eldoc-doc-buffer)
              ;; Force display of eldoc buffer in a new window
              (let ((eldoc-buf (get-buffer "*eldoc*")))
                (if (and eldoc-buf (> (buffer-size eldoc-buf) 0))
                    (progn
                      (pop-to-buffer eldoc-buf)
                      (select-window (get-buffer-window eldoc-buf)))
                  ;; If no eldoc content, try describe-symbol
                  (describe-symbol (intern symbol))
                  (when-let ((help-window (get-buffer-window "*Help*")))
                    (select-window help-window)))))
          (message "No symbol at point"))))
     ;; Fallback to describe-symbol
     (t
      (let ((symbol (thing-at-point 'symbol)))
        (if symbol
            (progn
              (describe-symbol (intern symbol))
              (when-let ((help-window (get-buffer-window "*Help*")))
                (select-window help-window)))
          (message "No symbol at point"))))))

  (use-package consult-eglot
    :after (consult eglot))

  (use-package consult-eglot-embark
    :after consult-eglot
    :config (consult-eglot-embark-mode))

  #+END_SRC

Simple linter functions using compile-mode for built-in error navigation.
  #+BEGIN_SRC emacs-lisp
  ;; Enable ANSI color support in compilation buffers
  (require 'ansi-color)
  (add-hook 'compilation-filter-hook 'ansi-color-compilation-filter)

  (defun my/lint-golangci ()
    "Run golangci-lint on entire Go project using compile-mode and pop to compilation buffer."
    (interactive)
    (if (executable-find "golangci-lint")
        (let ((default-directory (or (projectile-project-root)
                                     (vc-root-dir)
                                     default-directory))
              (compilation-auto-jump-to-first-error nil))
          ;; Use --color=always for colored output in compilation buffer
          (compile "golangci-lint run --color=always")
          ;; Jump to compilation window without auto-navigation
          (pop-to-buffer "*compilation*"))
      (message "golangci-lint not found")))

  (defun my/lint-ruff ()
    "Run ruff on entire Python project using compile-mode and pop to compilation buffer."
    (interactive)
    (if (executable-find "ruff")
        (let ((default-directory (or (projectile-project-root)
                                     (vc-root-dir)
                                     default-directory))
              (compilation-auto-jump-to-first-error nil))
          ;; Use --force-exclude to respect .gitignore, no --color flag needed (ruff auto-detects)
          (compile "ruff check --force-exclude --output-format concise")
          ;; Jump to compilation window without auto-navigation
          (pop-to-buffer "*compilation*"))
      (message "ruff not found")))

#+END_SRC

*** DevDocs
:PROPERTIES:
:ID:       d20f74ab-0a66-4ac8-b56b-7b251f57c5af
:CUSTOM_ID: devdocs
:END:
#+BEGIN_SRC emacs-lisp
  (use-package devdocs
    :general ("C-h D" 'devdocs-lookup))
#+END_SRC
*** Particular Programming modes
:PROPERTIES:
:ID:       8DE130F8-A158-4350-A02F-C99A2EC9A288
:CUSTOM_ID: particular-programming-modes
:END:
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :hook ((markdown-mode . visual-line-mode)))

  (use-package yaml-mode)

  (use-package json-mode)


  (defun at/eglot-organize-imports ()
    "Organize imports via eglot, with error handling."
    (interactive)
    (condition-case err
        (when (and (fboundp 'eglot-code-action-organize-imports)
                   (eglot-current-server))
          (eglot-code-action-organize-imports))
      (error
       (message "Eglot organize imports failed: %s" (error-message-string err)))))

  (defun at/safe-eglot-format-buffer ()
    "Format buffer via eglot, with error handling."
    (condition-case err
        (when (and (fboundp 'eglot-format-buffer)
                   (eglot-current-server))
          (eglot-format-buffer))
      (error
       (message "Eglot format failed: %s" (error-message-string err)))))

  (defun at/setup-go-before-save-hooks ()
    "Set up before-save hooks for Go buffers."
    (add-hook 'before-save-hook 'delete-trailing-whitespace nil t)
    (add-hook 'before-save-hook 'at/eglot-organize-imports nil t)
    (add-hook 'before-save-hook 'at/safe-eglot-format-buffer nil t))

  (use-package go-ts-mode
    :hook (go-ts-mode . at/setup-go-before-save-hooks))

  (use-package gotest-ts)

  (use-package rust-mode
    :init
    (setq rust-mode-treesitter-derive t))

  (use-package sh-script)

  (use-package terraform-mode
    :config
    (setq terraform-format-on-save t))

  (use-package fish-mode)

  (use-package sqlformat
    :config
    (setq sqlformat-command 'pgformatter))
#+END_SRC

These packages need to be installed in the Python environment too.
#+BEGIN_SRC sh
 pip install "python-lsp-server[all]" pylsp-mypy pylsp-rope python-lsp-ruff python-lsp-black
#+END_SRC

#+BEGIN_SRC emacs-lisp

  (use-package python-black)
  (use-package python-pytest)
  (use-package python-isort)
  (use-package pyvenv)
  ;; (use-package auto-virtualenv
  ;;   :config
  ;;   (setq auto-virtualenv-verbose t)
  ;;   (auto-virtualenv-setup))

  (use-package pet
    :hook (python-base-mode . pet-mode))

#+END_SRC

** Yasnippets
:PROPERTIES:
:ID:       1A54EDBC-D408-4843-8028-CEE653B9E440
:CUSTOM_ID: yasnippets
:END:
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :config
    (yas-global-mode +1)
    (setq yas-snippet-dirs (append yas-snippet-dirs
  				 '("~/.emacs.d/snippets/"))))

  (use-package yasnippet-snippets
    :after yasnippet)
#+END_SRC

*** Snippets
:PROPERTIES:
:CUSTOM_ID: snippets
:END:
These are various snippets for use with Yasnippet.
#+BEGIN_SRC :tangle "~/.emacs.d/snippets/go-mode/ifen" :eval no :mkdirp yes
# -*- mode: snippet -*-
# name: if error nil
# key: ifen
# --
if err != nil {
  $1
}
#+END_SRC

*** Kubernetes
:PROPERTIES:
:ID:       664E2A07-1DA8-4255-892E-565438153A71
:CUSTOM_ID: kubernetes
:END:
#+begin_src emacs-lisp
  (use-package kele)

  (use-package kubernetes
    :commands (kubernetes-overview)
    :config
    (setq kubernetes-poll-frequency 3600
          kubernetes-redraw-frequency 3600))
#+end_src

** Org
:PROPERTIES:
:CUSTOM_ID: org
:END:
See helpful examples at:
- http://doc.norang.ca/org-mode.html

*** Setup
:PROPERTIES:
:ID:       F8105CAC-7798-4FA9-99AD-A946940C527A
:CUSTOM_ID: setup-0
:END:
#+BEGIN_SRC emacs-lisp
  (use-package org
    :general
    ("C-c l" 'org-store-link)
    ;; This conflicts with Avy
    (org-mode-map "C-'" nil)

    :config
    (setq org-agenda-files my/org-agenda-files
          org-directory my/org-dir
          org-tags-column 75
          org-log-into-drawer t ;; hide the log state change history a bit better
          org-hide-emphasis-markers t ;;TODO ignore emphasis markers on kill?
          org-log-done t
          org-id-link-to-org-use-id t
          org-deadline-warning-days 7
          org-agenda-skip-scheduled-if-deadline-is-shown t
          org-agenda-start-with-log-mode t
          org-habit-graph-column 65
          org-archive-location "archive.org::datetree/"
          org-duration-format 'h:mm ;; show hours at max, not days
          org-agenda-compact-blocks t
          org-confirm-babel-evaluate nil
          org-cycle-separator-lines 0
          ;; hide empty agenda sections
          org-agenda-clockreport-parameter-plist '(:stepskip0 t :link t :maxlevel 2 :fileskip0 t)
          org-structure-template-alist (append
                                        org-structure-template-alist
                                        '(("not" . "note")
                                          ("m" . "export markdown")))
          ;; default show today
          org-agenda-span 'day
          org-agenda-start-day "-0d"
          org-agenda-start-on-weekday 1
          org-agenda-custom-commands
          '(("d" "Done tasks" tags "/DONE|CANCELED")
            ("g" "Plan Today"
             ((agenda "" ((org-agenda-span 'day)))
              (org-agenda-skip-function '(org-agenda-skip-deadline-if-not-today))
              (org-agenda-entry-types '(:deadline))
              (org-agenda-overriding-header "Today's Deadlines "))))))
#+END_SRC

Use ~org-tidy~ to hide property drawers by default. You can call ~M-x org-tidy-untidy-buffer~ to unhide
them if you want to manually edit them.
#+BEGIN_SRC emacs-lisp
  (use-package org-tidy
    :ensure t
    :hook
    (org-mode . org-tidy-mode))
#+end_src

~org-appear~ shows ~org-mode~ hidden elements when the cursor is over them. This makes it easier to edit
marked-up text.
#+BEGIN_SRC emacs-lisp
  (use-package org-appear
    :hook (org-mode . org-appear-mode))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package ob-restclient)
#+END_SRC

[[https://github.com/minad/org-modern][~org-modern~]] gives ~org-mode~ a more modern style.
#+BEGIN_SRC emacs-lisp
  (use-package org-modern
    :config
    (global-org-modern-mode))
  (set-face-attribute 'org-modern-symbol nil :family "Iosevka")
#+END_SRC


[[https://github.com/calvinwyoung/org-autolist][~org-autolist~]] modifies the way ~RET~ works when inserting lists to make it a bit more intuitive.
#+BEGIN_SRC emacs-lisp
  (use-package org-autolist
    :hook (org-mode . org-autolist-mode))
#+END_SRC

~org-stick-header~ pins a breadcrumb navigation structure to the first line of all ~org-mode~ buffers.
#+BEGIN_SRC emacs-lisp
  (use-package org-sticky-header
    :config
    (setq org-sticky-header-full-path 'full
          org-sticky-header-prefix "📌: "
          org-sticky-header-outline-path-separator " > ")
    :hook (org-mode . org-sticky-header-mode))
#+END_SRC

*** Task States
:PROPERTIES:
:ID:       6E3FBBD2-310E-4EDF-8EA3-CA9C4AA56F08
:CUSTOM_ID: task-states
:END:
#+BEGIN_SRC emacs-lisp
  (setq org-todo-keywords
      '((sequence "TODO(t)"
                  "PLANNING(p)"
                  "IN-PROGRESS(i@/!)"
                  "VERIFYING(v!)"
                  "BLOCKED(b@)"
                  "WAITING(w@)"
                  "|"
                  "DONE(d!)"
                  "CANCELLED(c@)"
                  "OBE(o@)"
                  "WONT-DO(n@/!)")))
#+END_SRC

*** Tags
:PROPERTIES:
:ID:       23040127-1D67-4725-90FE-22183BE585E9
:CUSTOM_ID: tags
:END:
#+BEGIN_SRC emacs-lisp
  (setq org-tag-alist '(
                        ;; Task types
                        (:startgroup . nil)
                        ("email" . ?e)
                        ("design" . ?d)
                        ("implementation" . ?M)
                        ("improvement" . ?r)
                        ("investigation" . ?v)
                        (:endgroup . nil)

                        ;; Meeting types
                        (:startgroup . nil)
                        ("weekly_setup" . ?S)
                        ("weekly_wrap_up" . ?W)
                        ("1_to_1" . ?1)
                        (:endgroup . nil)

                        ;; Code TODOs tags
                        ("questionable_code" . ?q)
                        ("refactor" . ?F)

                        ;; Special tags
                        ("CRITICAL" . ?c)

                        ;; Meeting tags
                        ("meeting" . ?m)

                        ;; Work Log Tags
                        ("accomplishment" . ?A)
                        ))
#+END_SRC

*** Capture Templates
:PROPERTIES:
:ID:       FEDA9815-5C33-42E4-BE74-EE2C99A79184
:CUSTOM_ID: capture-templates
:END:

#+BEGIN_SRC emacs-lisp
  (use-package org-capture
    :straight nil
    :ensure nil
    :general
    (my-leader-def
      "c" 'org-capture)
    :config
    (setq org-refile-targets '((nil :maxlevel . 9)
                               (org-agenda-files :maxlevel . 9))
          ;; Refile in a single go
          org-outline-path-complete-in-steps nil
          ;; Show full paths for refiling
          org-refile-use-outline-path t
          org-capture-templates
          '(
            ("c" "Note on current task" plain (clock) "\n\n%T from: %a\n%i\n%?")

            ("g" "General To-Do"
             entry (file+headline "~/notebook/refile.org" "General Tasks")
             "* TODO [#B] %?\n:Created: %T\n "
             :empty-lines 0)

            ("s" "Source code To-Do"
             entry (file+headline "~/notebook/refile.org" "Code Related Tasks")
             "* TODO [#B] %?\n:Created: %T\n\nFrom [[file:%(org-capture-get :original-file)::%(at/get-capture-line-number)][%(org-capture-get :original-file-nondirectory):%(at/get-capture-line-number)]]:\n#+BEGIN_SRC\n%(at/get-capture-region-or-line-content)\n#+END_SRC\n\nIssue:\n"
             :empty-lines 0)

            ("n" "General Note"
             entry (file+headline "~/notebook/notes.org" "General Notes")
             "* %?\n:Created: %T\n "
             :empty-lines 0)

            ("m" "Meeting")

            ("ma" "Adhoc Meeting"
             entry (file+olp+datetree "~/notebook/meetings.org")
             "* %? :meeting:%^g \n:Created: %T\n** Attendees\n- \n** Notes\n** Action Items\n*** TODO [#A] "
             :tree-type week
             :clock-in t
             :clock-resume t
             :empty-lines 0)

            )))

  (defun at/get-capture-line-number ()
    "Get the line number from the buffer that org-capture was called from."

    (with-current-buffer (org-capture-get :original-buffer) (number-to-string (line-number-at-pos))))

  (defun at/get-capture-region-or-line-content ()
    "Get the content of the active region or the current line from the buffer org-capture was called from."

    (if  (equal (plist-get org-store-link-plist :initial) "")
        (with-current-buffer (org-capture-get :original-buffer) (thing-at-point 'line t))
      (plist-get org-store-link-plist :initial)))

  ;; Heavily inspired by: https://emacs.stackexchange.com/questions/10597/how-to-refile-into-a-datetree
  (defun at/org-refile-to-datetree (&optional file date action)
    "Refile a subtree to a datetree corresponding to a date.
    If FILE is nil, refile in the current file. If DATE is nil
    refile using the entries timestamp or, failing that, the
    current time. If an ACTION expression is supplied execute it
    after pasting the subtree."

    ;; TODO: which timestamp do we actually want to use here?
    (let* ((datetree-date (or date
                              (org-entry-get nil "TIMESTAMP" t)
                              (org-read-date t nil "now")))
           (date (org-date-to-gregorian datetree-date)))
      (with-current-buffer (current-buffer)
        (save-excursion
          (org-cut-subtree)
          (if file (find-file file))
          (org-datetree-find-iso-week-create date)
          (org-narrow-to-subtree)
          (show-subtree)
          (org-end-of-subtree t)
          (newline)
          (goto-char (point-max))
          (org-paste-subtree 4)
          (if action (eval-expression action))
          (widen)))))

  (defun at/refile-to-meetings-at-date (date)
    "Refile a subtree to the supplied date in meetings.org"

    (interactive "sEnter date in yyyy-mm-dd format: ")
    (at/org-refile-to-datetree "meetings.org" date nil))

  (defun at/complete-regular-meeting (file-name template)
    "Mark the top-level headline in FILE-NAME as done, refile the
    entry to meetings.org and repopulate the file with the given
    template."

    (interactive)
    (unless
        (string= file-name buffer-file-name)
      (error "Function called from unexpected location"))
    (beginning-of-buffer)
    ;;(org-todo "DONE")
    (at/org-refile-to-datetree "~/notebook/meetings.org" nil nil)
    (insert template))
#+END_SRC

*** Regular Meetings Example
:PROPERTIES:
:CUSTOM_ID: regular-meetings-example
:END:
This is an example of how I process regular meetings like 1 to 1s:
1. use the capture template below to gather agenda items during the week. These are accumulated into
   the 'My Agenda' heading in the given file.
2. during the meeting work through the agenda in the file
3. once the meeting is complete run ~at/complete-meeting-X~ which will refile the meeting into the
   main ~meetings.org~ file and setup a new empty template for the next one.
#+BEGIN_SRC emacs-lisp :tangle no

;; Add local capture settings to main list
(setq org-capture-templates (append
                             org-capture-templates
                             '(
                               ("mp" "Note for 1:1 with X"
                                 item (file+olp "~/notebook/regular_meetings/1_to_1_with_X.org" "1:1 with X" "My Agenda")
                                 "%i"
                                 :empty-lines 0)
                               )))

(defun at/complete-meeting-X ()
  "Go to the top level of the current entry, mark it as done, refile it and copy across a template for next time."

  (interactive)
  (at/complete-regular-meeting
   "/Users/andrew.thompson/notebook/regular_meetings/1_to_1_with_X.org"
   "* 1:1 with X :meeting:1_to_1:\n** My Agenda\n** Notes\n** Action Items"))
#+END_SRC


*** Agenda
:PROPERTIES:
:ID:       E9F8DE67-D355-430F-B93B-F57AE1D2E10F
:CUSTOM_ID: agenda
:END:
[[https://github.com/alphapapa/org-super-agenda][~org-super-agenda~]] improves the existing ~org-agenda~ in various ways.

#+BEGIN_SRC emacs-lisp
  (use-package org-super-agenda
    :after org-agenda
    :config
    (setq org-super-agenda-header-map nil)
    (org-super-agenda-mode))

  (setq org-agenda-custom-commands
        '(
          ("j" "Andrew's Super View"
           (
            (agenda ""
                    (
                     (org-agenda-remove-tags t)
                     (org-agenda-span 7)
                     )
                    )

            (alltodo ""
                     (
                      ;; Remove tags to make the view cleaner
                      (org-agenda-remove-tags t)
                      (org-agenda-prefix-format "  %t  %s")
                      (org-agenda-overriding-header "CURRENT STATUS")

                      ;; Define the super agenda groups (sorts by order)
                      (org-super-agenda-groups
                       '(
                         ;; Filter where tag is CRITICAL
                         (:name "Critical Tasks"
                                :tag "CRITICAL"
                                :order 0
                                )
                         ;; Filter where TODO state is IN-PROGRESS
                         (:name "Currently Working"
                                :todo "IN-PROGRESS"
                                :order 1
                                )
                         ;; Filter where TODO state is PLANNING
                         (:name "Planning Next Steps"
                                :todo "PLANNING"
                                :order 2
                                )
                         ;; Filter where TODO state is BLOCKED or where the tag is obstacle
                         (:name "Problems & Blockers"
                                :todo "BLOCKED"
                                :tag "obstacle"
                                :order 3
                                )
                         ;; Filter where tag is meeting and priority is A (only want TODOs from meetings)
                         (:name "Meeting Action Items"
                                :and (:tag "meeting" :priority "A")
                                :order 8
                                )
                         ;; Filter where state is TODO and the priority is A and the tag is not meeting
                         (:name "Other Important Items"
                                :and (:todo "TODO" :priority "A" :not (:tag "meeting"))
                                :order 9
                                )
                         ;; Filter where state is TODO and priority is B
                         (:name "General Backlog"
                                :and (:todo "TODO" :priority "B")
                                :order 10
                                )
                         ;; Filter where the priority is C or less (supports future lower priorities)
                         (:name "Non Critical"
                                :priority<= "C"
                                :order 11
                                )
                         ;; Filter where TODO state is VERIFYING
                         (:name "Currently Being Verified"
                                :todo "VERIFYING"
                                :order 20
                                )
                     ))))))))

  (defhydra hydra-org-agenda (:pre (setq which-key-inhibit t)
                                   :post (setq which-key-inhibit nil)
                                   :hint nil)
    "
    Org agenda (_q_uit)

    ^Clock^      ^Visit entry^              ^Date^             ^Other^
    ^-----^----  ^-----------^------------  ^----^-----------  ^-----^---------
    _ci_ in      _SPC_ in other window      _ds_ schedule      _gr_ reload
    _co_ out     _TAB_ & go to location     _dd_ set deadline  _._  go to today
    _cq_ cancel  _RET_ & del other windows  _dt_ timestamp     _gd_ go to date
    _cj_ jump    _o_   link                 _+_  do later      ^^
    ^^           ^^                         _-_  do earlier    ^^
    ^^           ^^                         ^^                 ^^
    ^View^          ^Filter^                 ^Headline^         ^Toggle mode^
    ^----^--------  ^------^---------------  ^--------^-------  ^-----------^----
    _vd_ day        _ft_ by tag              _ht_ set status    _tf_ follow
    _vw_ week       _fr_ refine by tag       _hk_ kill          _tl_ log
    _vt_ fortnight  _fc_ by category         _hr_ refile        _ta_ archive trees
    _vm_ month      _fh_ by top headline     _hA_ archive       _tA_ archive files
    _vy_ year       _fx_ by regexp           _h:_ set tags      _tr_ clock report
    _vn_ next span  _fd_ delete all filters  _hp_ set priority  _td_ diaries
    _vp_ prev span  ^^                       ^^                 ^^
    _vr_ reset      ^^                       ^^                 ^^
    ^^              ^^                       ^^                 ^^
    "
    ;; Entry
    ("hA" org-agenda-archive-default)
    ("hk" org-agenda-kill)
    ("hp" org-agenda-priority)
    ("hr" org-agenda-refile)
    ("h:" org-agenda-set-tags)
    ("ht" org-agenda-todo)
    ;; Visit entry
    ("o"   link-hint-open-link :exit t)
    ("<tab>" org-agenda-goto :exit t)
    ("TAB" org-agenda-goto :exit t)
    ("SPC" org-agenda-show-and-scroll-up)
    ("RET" org-agenda-switch-to :exit t)
    ;; Date
    ("dt" org-agenda-date-prompt)
    ("dd" org-agenda-deadline)
    ("+" org-agenda-do-date-later)
    ("-" org-agenda-do-date-earlier)
    ("ds" org-agenda-schedule)
    ;; View
    ("vd" org-agenda-day-view)
    ("vw" org-agenda-week-view)
    ("vt" org-agenda-fortnight-view)
    ("vm" org-agenda-month-view)
    ("vy" org-agenda-year-view)
    ("vn" org-agenda-later)
    ("vp" org-agenda-earlier)
    ("vr" org-agenda-reset-view)
    ;; Toggle mode
    ("ta" org-agenda-archives-mode)
    ("tA" (org-agenda-archives-mode 'files))
    ("tr" org-agenda-clockreport-mode)
    ("tf" org-agenda-follow-mode)
    ("tl" org-agenda-log-mode)
    ("td" org-agenda-toggle-diary)
    ;; Filter
    ("fc" org-agenda-filter-by-category)
    ("fx" org-agenda-filter-by-regexp)
    ("ft" org-agenda-filter-by-tag)
    ("fr" org-agenda-filter-by-tag-refine)
    ("fh" org-agenda-filter-by-top-headline)
    ("fd" org-agenda-filter-remove-all)
    ;; Clock
    ("cq" org-agenda-clock-cancel)
    ("cj" org-agenda-clock-goto :exit t)
    ("ci" org-agenda-clock-in :exit t)
    ("co" org-agenda-clock-out)
    ;; Other
    ("q" nil :exit t)
    ("gd" org-agenda-goto-date)
    ("." org-agenda-goto-today)
    ("gr" org-agenda-redo))

  (general-define-key
   :keymaps 'org-agenda-mode-map
   "." 'hydra-org-agenda/body)
#+END_SRC

*** Blocks
:PROPERTIES:
:ID:       FF254A72-BC0A-4F8E-B857-D72250D95EC7
:CUSTOM_ID: blocks
:END:
Setup various ~org-mode~ structure templates. When typing ~<~ at the start of a line this will popup
a menu of various types of blocks that you may want to insert.
#+BEGIN_SRC emacs-lisp
  (defun my-org-structure-templates ()
    (require 'org-tempo)
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("sh" . "src sh")))

  ;; todo this shuold be part of the org setup
  (defhydra hydra-org-template (:color blue :hint nil)
    "
   _c_enter  _Q_uote     _e_macs-lisp    _L_aTeX:
   _l_ink    _E_xample   _p_erl          _i_ndex:
   _a_scii   _v_erse     _m_arkdown      _I_NCLUDE:
   _s_rc     _n_ote      plant_u_ml      _H_TML:
   _h_tml    ^ ^         ^ ^             _A_SCII:
  "
    ("s" (hot-expand "<s"))
    ("E" (hot-expand "<e"))
    ("Q" (hot-expand "<q"))
    ("v" (hot-expand "<v"))
    ("n" (hot-expand "<not"))
    ("c" (hot-expand "<c"))
    ("l" (hot-expand "<li"))
    ("h" (hot-expand "<h"))
    ("a" (hot-expand "<a"))
    ("L" (hot-expand "<L"))
    ("i" (hot-expand "<i"))
    ("e" (hot-expand "<s" "emacs-lisp"))
    ("p" (hot-expand "<s" "perl"))
    ("u" (hot-expand "<s" "plantuml :file CHANGE.png"))
    ("m" (hot-expand "<m"))
    ("I" (hot-expand "<I"))
    ("H" (hot-expand "<H"))
    ("A" (hot-expand "<A"))
    ("<" self-insert-command "ins")
    ("q" nil "quit"))

  (require 'org-tempo) ; Required from org 9 onwards for old template expansion
  ;; Reset the org-template expnsion system, this is need after upgrading to org 9 for some reason
  (setq org-structure-template-alist (eval (car (get 'org-structure-template-alist 'standard-value))))
  (defun hot-expand (str &optional mod header)
    "Expand org template.

  STR is a structure template string recognised by org like <s. MOD is a
  string with additional parameters to add the begin line of the
  structure element. HEADER string includes more parameters that are
  prepended to the element after the #+HEADER: tag."
    (let (text)
      (when (region-active-p)
        (setq text (buffer-substring (region-beginning) (region-end)))
        (delete-region (region-beginning) (region-end))
        (deactivate-mark))
      (when header (insert "#+HEADER: " header) (forward-line))
      (insert str)
      (org-tempo-complete-tag)
      (when mod (insert mod) (forward-line))
      (when text (insert text))))

  (general-define-key
   :keymaps 'org-mode-map
   ;; disable this agenda key since I use it for avy
   "C-'" nil
   "<" '(lambda () (interactive)
          (if (or (region-active-p) (looking-back "^"))
              (hydra-org-template/body)
            (self-insert-command 1))))
#+END_SRC

*** Export Options
:PROPERTIES:
:ID:       32ED7961-A5B9-4EB0-B18D-BA3CF1D9B56A
:CUSTOM_ID: export-options
:END:
[[https://github.com/hniksic/emacs-htmlize][~htmlize~]] converts a buffer to HTML with nice syntax highlighting.
#+BEGIN_SRC emacs-lisp
  (use-package htmlize
    :defer t)
#+END_SRC

[[https://github.com/sshaw/copy-as-format][~copy-as-format~]] makes it easy to copy a region and convert the markup to a bunch of different
flavours for easy pasting into other places.
#+begin_src emacs-lisp
  (use-package copy-as-format
    :bind (("C-c w m" . copy-as-format-markdown)
           ("C-c w s" . copy-as-format-slack)
           ("C-c w o" . copy-as-format-org-mode)
           ("C-c w r" . copy-as-format-rst)
           ("C-c w h" . copy-as-format-html)
           ("C-c w g" . copy-as-format-github)
           ("C-c w w" . copy-as-format))
    :custom
    (copy-as-format-default "slack")
    :config
    (defun copy-as-format--org-mode (text _multiline)
      (format "#+begin_src %s\n%s\n#+end_src\n"
              (replace-regexp-in-string "-mode\\'" "" (symbol-name major-mode))
              text)))
#+end_src

[[https://github.com/titaniumbones/ox-slack][~ox-slack~]] is an ~org-mode~ exporter that converts text to Slack flavoured markdown.
#+begin_src emacs-lisp
  (use-package ox-slack
    :after org
    :bind
    ("C-c w k" . org-slack-export-to-clipboard-as-slack)
    :config
    (advice-add 'org-slack-export-to-clipboard-as-slack
                :after #'(lambda () (deactivate-mark))))
#+end_src

Get fish shell syntax working.
#+begin_src emacs-lisp
  (org-babel-do-load-languages 'org-babel-load-languages
                             (append org-babel-load-languages
                              '((python . t)
                                (shell . t)
                                (restclient . t)
                                (sql . t))))

  (use-package ob-sql-mode)
#+end_src

#+begin_src emacs-lisp
  (use-package org-make-toc
    :config
    (setq org-make-toc-insert-custom-ids t))
#+end_src
** Shells
:PROPERTIES:
:ID:       C357E950-E226-4B10-83AD-FD2EDEFE4781
:CUSTOM_ID: shells
:END:
[[https://github.com/akermu/emacs-libvterm][~vterm~]] provides a terminal emulator within Emacs.

Some interesting config options:
- https://github.com/jeffyql/dotfiles/blob/4484469d36e716dfe9431f1b489015423b63a91f/init-vterm.el

#+begin_src emacs-lisp
  (use-package vterm
  :general
  (my-leader-def "x" 'vterm-toggle)
  ("C-c v" 'vterm-copy-mode)
  (:keymaps 'vterm-mode-map
            "M-y" 'vterm-yank-pop
            ;; For some reason the keymap exception below doesn't work as expected.
            "C-t" (lookup-key global-map (kbd "C-t")))
  :hook
  ;; Disable hl-line-mode to reduce flickering: https://github.com/akermu/emacs-libvterm/issues/432
  (vterm-mode . (lambda () (setq-local global-hl-line-mode nil)))
  (vterm-copy-mode . (lambda () (call-interactively 'hl-line-mode)))
  (vterm-copy-mode . (lambda ()
                       (if vterm-copy-mode
                           (setq-local mode-line-process
                                       (list " " (propertize "VTerm[COPY]" 'face 'font-lock-warning-face)))
                         (setq-local mode-line-process
                                     (list " " (propertize "VTerm" 'face 'font-lock-keyword-face))))))
  :config
  (setq vterm-max-scrollback 100000
        vterm-clear-scrollback t
        vterm-buffer-name-string "vterm-%s"
        vterm-shell "fish"
        vterm-eval-cmds '(("find-file" find-file)
                          ("message" message)
                          ("vterm-clear-scrollback" vterm-clear-scrollback-command)
                          ("dired" dired)
                          ("ediff-files" ediff-files))
        vterm-keymap-exceptions
        '("M-:" "C-c" "C-x" "C-u" "C-g" "C-h" "C-l" "M-x" "M-o" "C-y" "M-y" "M-s" "C-t")))
#+end_src

#+begin_src emacs-lisp
  (use-package multi-vterm)
#+end_src

[[https://github.com/jixiuf/vterm-toggle][~vterm-toggle~]] allows for easy toggling of vterms.
#+begin_src emacs-lisp
  (use-package vterm-toggle)
#+end_src
** Site Local
:PROPERTIES:
:ID:       07C27D9E-4EE9-424B-8D36-AD2FCE24B14E
:CUSTOM_ID: site-local
:END:
Various setup like sensitive tags and functions that deal with them are stored elsewhere and loaded here.
#+BEGIN_SRC emacs-lisp
  (if (file-exists-p "~/notebook/local-dotfiles/site-local.el")
      (load "~/notebook/local-dotfiles/site-local.el"))
#+END_SRC

** Package Versions
:PROPERTIES:
:ID:       3e84d692-0f7b-4a12-beac-9628a64ceee9
:CUSTOM_ID: package-versions
:END:

#+begin_src emacs-lisp :tangle "~/.emacs.d/straight/versions/default.el" :mkdirp yes
  (("Emacs-wgrep" . "49f09ab9b706d2312cab1199e1eeb1bcd3f27f6f")
   ("ace-window" . "77115afc1b0b9f633084cf7479c767988106c196")
   ("all-the-icons-completion" . "4c8bcad8033f5d0868ce82ea3807c6cd46c4a198")
   ("all-the-icons-dired" . "e157f0668f22ed586aebe0a2c0186ab07702986c")
   ("all-the-icons.el" . "4778632b29c8c8d2b7cd9ce69535d0be01d846f9")
   ("auto-virtualenv" . "b39a7496cc4e226ef1f9fcdfeb5a12400f71c982")
   ("avy" . "933d1f36cca0f71e4acb5fac707e9ae26c536264")
   ("avy-menu" . "621052484b80cb13c12a368aedda1c3a209d2c88")
   ("back-button" . "f8783c98a7fefc1d0419959c1b462c7dcadce5a8")
   ("bind-key" . "ec9d0505febe2556b47457355763f5f1408a35ac")
   ("browse-at-remote" . "76aa27dfd469fcae75ed7031bb73830831aaccbf")
   ("button-lock" . "1f7a89ca05b6167af7d1337ad23a5d923486caac")
   ("cape" . "f925182957ea11119e27c2ac7200cc1fbba5612a")
   ("combobulate" . "17c71802eed2df1a6b25199784806da6763fb90c")
   ("compat" . "97f24af413a38a7f1aaedb29f5aaaa333796a5b4")
   ("consult" . "d32cccdcb5559b503306291fa9f52df19594d687")
   ("consult-dir" . "4532b8d215d16b0159691ce4dee693e72d71e0ff")
   ("consult-eglot" . "2816f8aad7d6a1e6d5e5b4a5e04c1d74b82b26b8")
   ("consult-flycheck" . "bbb2de146f7f675fddc1e07865267031b303e013")
   ("consult-project-extra" . "982e8008d69ea6733a2a7548e245d645c0fefb3f")
   ("consult-projectile" . "400439c56d17bca7888f7d143d8a11f84900a406")
   ("consult-xref-stack" . "aa9bbf7a3ff43353b7c10595b3d13887b213466b")
   ("copy-as-format" . "b9f6f725ca9701c5a02bfb479573fdfcce2e1e30")
   ("corfu" . "5e9a2229322541c1ee28b72128cf7c097b32dd5d")
   ("corfu-candidate-overlay" . "f730de2c150720ee70d4d7be4b8bb533c7dfc97e")
   ("corfu-terminal" . "501548c3d51f926c687e8cd838c5865ec45d03cc")
   ("corral" . "e7ab6aa118e46b93d4933d1364bc273f57cd6911")
   ("csv-mode" . "1695ee17521d55dbe94caacaef5a94dfa933cd9f")
   ("dash.el" . "fcb5d831fc08a43f984242c7509870f30983c27c")
   ("devdocs.el" . "4023409017d37dc2d6c230fe010fadb917b4395b")
   ("diff-hl" . "08243a6e0b681c34eb4e4abf1d1c4c1b251ce91e")
   ("dired-git-info" . "578b32f6287911e950c79e285a7b8088337de020")
   ("diredfl" . "fe72d2e42ee18bf6228bba9d7086de4098f18a70")
   ("dogears.el" . "162671e66cac601f1cfd5d22f7da2671af2e9866")
   ("doom-modeline" . "e63dcee017460935a7e1d3f8633008679b3921f9")
   ("eglot" . "a8cb16b833d6e8b6e9ea6b995a82b14fee0eb398")
   ("el-get" . "56810ad86dc16e5286357e643ec514c85114441d")
   ("eldoc" . "1d11743436e9ce0d11529bfdf1e548e64f31a92e")
   ("elisp-refs" . "541a064c3ce27867872cf708354a65d83baf2a6d")
   ("emacs" . "cab1ea60cf7aa24709e7fe2ac11220acd4e895e0")
   ("emacs-async" . "bb3f31966ed65a76abe6fa4f80a960a2917f554e")
   ("emacs-emojify" . "1b726412f19896abf5e4857d4c32220e33400b55")
   ("emacs-fish" . "2526b1803b58cf145bc70ff6ce2adb3f6c246f89")
   ("emacs-libvterm" . "056ad74653704bc353d8ec8ab52ac75267b7d373")
   ("emacs-memoize" . "51b075935ca7070f62fae1d69fe0ff7d8fa56fdd")
   ("emacs-pet" . "1abf16ebe1f4280fc2f875b4e99d8c26756d0f36")
   ("emacs-python-black" . "4da1519345b3d5c513d82ef0d39536dd9c626d42")
   ("emacs-python-isort" . "8b4948b7fcad90fc9b72f69f4653260bd21f62c3")
   ("emacs-python-pytest" . "02784b0701cf0698277e3252c2e394cf02fab055")
   ("emacs-reformatter" . "6ac08cebafb9e04b825ed22d82269ff69cc5f87f")
   ("emacs-request" . "c22e3c23a6dd90f64be536e176ea0ed6113a5ba6")
   ("emacs-undo-fu" . "545e29459e71a9aca81c96c1385d43a5696e27e9")
   ("emacs-which-key" . "38d4308d1143b61e4004b6e7a940686784e51500")
   ("emacsmirror-mirror" . "5f795cc476f24d011e2cd83159a38522fe832a97")
   ("embark" . "89c7610fa7988b6c93029f87afa4ba6b7768bf81")
   ("exec-path-from-shell" . "4896a797252fbfdac32fb77508500ac7d220f717")
   ("expreg" . "ace8992f0b9e85b7d60f60083ed0be77879574a9")
   ("external-completion" . "c96acdcf0784215b0a7a5eaf94de3b7a855ed719")
   ("f.el" . "931b6d0667fe03e7bf1c6c282d6d8d7006143c52")
   ("fixmee" . "54500aaa8ae019034dc170af33f43465f5f03123")
   ("flycheck" . "a4d782e7af12e20037c0cecf0d4386cd2676c085")
   ("flycheck-eglot" . "0d7f0afc9bf08fce4a3ee225ec6540a91f8cfd76")
   ("flycheck-golangci-lint" . "14bf143ea7ae190544326576a156de9c915a4751")
   ("flycheck-projectile" . "ce6e9e8793a55dace13d5fa13badab2dca3b5ddb")
   ("flyspell-correct" . "1e7a5a56362dd875dddf848b9a9e25d1395b9d37")
   ("frame-cmds" . "5f845c06f1913ecda33c87b2b36b9e590a6f8870")
   ("frame-fns" . "b675ee568c0133709c2c39a125395486cdf1c610")
   ("free-keys" . "bed8e9c356c889cd98dd7a4a63c69d6c4960cf82")
   ("general.el" . "a48768f85a655fe77b5f45c2880b420da1b1b9c3")
   ("git-timemachine" . "d1346a76122595aeeb7ebb292765841c6cfd417b")
   ("gnu-elpa-mirror" . "f498c07548b83e13ff9e2b9e2f772a19256affdf")
   ("gotest-ts.el" . "ede3685388e76ed379b184cc62275bcdf819f104")
   ("gotest.el" . "490189e68d743a851bfb42d0017428a7550e8615")
   ("hcl-mode" . "1da895ed75d28d9f87cbf9b74f075d90ba31c0ed")
   ("helpful" . "03756fa6ad4dcca5e0920622b1ee3f70abfc4e39")
   ("ht.el" . "1c49aad1c820c86f7ee35bf9fff8429502f60fef")
   ("htmlize" . "bb9690081e251458041025484becbb9b2500c924")
   ("hydra" . "59a2a45a35027948476d1d7751b0f0215b1e61aa")
   ("ibuffer-vc" . "da9872e5f2d4a39137621cfdd66737d0a361298f")
   ("json-mode" . "466d5b563721bbeffac3f610aefaac15a39d90a9")
   ("json-snatcher" . "b28d1c0670636da6db508d03872d96ffddbc10f2")
   ("jsonrpc" . "444cafedd091815e674b6c93458ba97a55a76928")
   ("kele.el" . "e334c7a74b3a2ece5fa9b263ffcfbafc1f44563c")
   ("kind-icon" . "85bd8ed3a24fe283f6aeff6afa9a552516ec14e0")
   ("kubernetes-el" . "5cb580d0e1d18a97ec4d0ba33b374a0822a96d4f")
   ("let-alist" . "35a1dae3c540705433a510c13c8af80206b29b5f")
   ("ligature.el" . "6ac1634612dbd42f7eb81ecaf022bd239aabb954")
   ("list-utils" . "bbea0e7cc7ab7d96e7f062014bde438aa8ffcd43")
   ("llama" . "0cc2daffded18eea7f00a318cfa3e216977ffe50")
   ("magit" . "9654f5e09403699ca0ad2c6276a8656dd5e5473b")
   ("magit-popup" . "d8585fa39f88956963d877b921322530257ba9f5")
   ("map" . "8dc8c119d92ad61f352134e3078e32b2c6cb0719")
   ("marginalia" . "aa8e48b86f66739a86fb2e180103f8f9682004be")
   ("markdown-mode" . "7c51a2167c5a1330e0ab52fe5b2d03c1ead122ca")
   ("mathjax" . "84e5fd902d83c11460e008de8ed0aef74cb9a62a")
   ("melpa" . "0eb4c5156848d2334f440d0d4d295c4826b8590a")
   ("multi-vterm" . "36746d85870dac5aaee6b9af4aa1c3c0ef21a905")
   ("nav-flash" . "5d4b48567862f6be0ca973d6b1dca90e4815cb9b")
   ("nerd-icons.el" . "4476b4cabe63f5efafa3c0a8b370db4f6a92e90c")
   ("no-littering" . "57a7b63fe467eb89b716fdd1729d47f0b789727b")
   ("nongnu-elpa" . "fca2a26fd4e5e03ae82cb8f560de1ab3ef882a7e")
   ("ob-restclient.el" . "8183f8af08838854cf145ca4855b373f3e7c44b0")
   ("ob-sql-mode" . "2eaf436a6ac2178b94442d80f84fc6c02aa644d8")
   ("orderless" . "082a487f79ca5e960046a31599a5f97dac79a858")
   ("org" . "b89fda2c7eac2d319a370ecc644107e4156561aa")
   ("org-appear" . "32ee50f8fdfa449bbc235617549c1bccb503cb09")
   ("org-autolist" . "0f5dc4e00cb050b94289504925b36c7650552a1a")
   ("org-make-toc" . "5f0f39b11c091a5abf49ddf78a6f740252920f78")
   ("org-modern" . "1723689710715da9134e62ae7e6d41891031813c")
   ("org-sticky-header" . "697875935b04b25c8229b9155a1ea0cab3ebe629")
   ("org-super-agenda" . "fb20ad9c8a9705aa05d40751682beae2d094e0fe")
   ("org-tidy" . "0bea3a2ceaa999e0ad195ba525c5c1dcf5fba43b")
   ("ox-gfm" . "4f774f13d34b3db9ea4ddb0b1edc070b1526ccbb")
   ("ox-slack" . "bd797dcc58851d5051dc3516c317706967a44721")
   ("pcache" . "e287b5d116679f79789ee9ee22ee213dc6cef68c")
   ("pdf-tools" . "30b50544e55b8dbf683c2d932d5c33ac73323a16")
   ("persistent-soft" . "a1e0ddf2a12a6f18cab565dee250f070384cbe02")
   ("plz" . "981a4d09521ef59439713624702efcad996840a0")
   ("popon" . "bf8174cb7e6e8fe0fe91afe6b01b6562c4dc39da")
   ("popup-el" . "24dd22186403a6566c26ce4996cdb1eedb1cc5cd")
   ("popwin" . "ec77f3f1631cb2666971c57027a64833636ef0f6")
   ("project" . "778c0cdaa1fec7bb89d419004dec6ff81824f043")
   ("projectile" . "5c1b32d9548982d470c3fd48639fb0ec8d239c50")
   ("pyvenv" . "31ea715f2164dd611e7fc77b26390ef3ca93509b")
   ("rainbow-delimiters" . "f40ece58df8b2f0fb6c8576b527755a552a5e763")
   ("restclient" . "e7a54135233d66fc5bb0dbae315d673abdfb4146")
   ("rg.el" . "7611852b5517212a4f0fdab9cd9ecb0cf3995f08")
   ("rust-mode" . "f7334861bfc1d3dbcfbde464751837be2ec09ef3")
   ("s.el" . "dda84d38fffdaf0c9b12837b504b402af910d01d")
   ("seq" . "da86da9bf111f68fb81efd466d76d53af5aebc00")
   ("shrink-path.el" . "c14882c8599aec79a6e8ef2d06454254bb3e1e41")
   ("smartrep.el" . "fdf135e3781b286174b5de4d613f12c318d2023c")
   ("sqlformat" . "69ef8bec3ac8c9ce4a60f20a9721e4d7a592a84d")
   ("straight.el" . "4272a70d5a385c5c4f92f4f4b111f063db0afac7")
   ("string-utils" . "c2232d691617973ecf12a970c6008a161c21da14")
   ("svg-lib" . "341b6d13f313ae8fb1a3f6d0a3fb27c02f3925d8")
   ("switch-window" . "8f771b571a1e60fac2d2a9845c0a5a52d5b440df")
   ("tablist" . "fcd37147121fabdf003a70279cf86fbe08cfac6f")
   ("tabulated-list.el" . "b547d9b728935102d1c418bc0e978c221c37f6ab")
   ("terraform-mode" . "80383ff42bd0047cde6e3a1dfb87bdb9e0340da3")
   ("transient" . "49bbb29fd34b807948d4f2b91f61587c12a595f0")
   ("treesit-auto" . "016bd286a1ba4628f833a626f8b9d497882ecdf3")
   ("treesit-fold" . "5b76926c14436b252150f88a8cd7e125ab295bcb")
   ("ts.el" . "552936017cfdec89f7fc20c254ae6b37c3f22c5b")
   ("unfill" . "4a15511876983eeaa75e57fcab8d4d51fe9b3840")
   ("use-package" . "29552cf3af755f17e297862a7f635c469a28b09f")
   ("use-package-hydra" . "8cd55a1128fbdf6327bb38a199d206225896d146")
   ("vc-msg" . "d55a128616a876936f085e5af486924062e57d66")
   ("vertico" . "d8dc49a3520ab908c2b0f62a4a8ae32ca23f2726")
   ("vterm-toggle" . "06cb4f3c565e46470a3c4505c11e26066d869715")
   ("vundo" . "f57937d7f57e6d081f567debf14f11d87a28962f")
   ("with-editor" . "f32cd7b09d518b629bfaa3eeb92b539891c6b9bc")
   ("xref" . "63b5875528e9c8dba3abbc76dae1b49351273c1c")
   ("yaml-mode" . "d91f878729312a6beed77e6637c60497c5786efa")
   ("yaml.el" . "f99ef76c80e6fc3fcf650c4fe34e10726594a4c4")
   ("yasnippet" . "c1e6ff23e9af16b856c88dfaab9d3ad7b746ad37")
   ("yasnippet-snippets" . "f2fdb1693719ec906c683037c5031ca1f3230d91")
   ("zoom-frm" . "8f7ee71cb8d346112bb1cb029f363120dd587f1c"))
  :gamma

#+end_src
* Fish
:PROPERTIES:
:ID:       3EC52AEB-93C6-4720-8F88-EEA892B825C2
:CUSTOM_ID: fish
:END:

Testing out Fish Shell and so far I'm quite impressed. The completions are very nice and need no setup at all.

Useful key built-in bindings:
- ~Alt .~ :: cycle through arguments to previous commands

** Development Tools Setup
:PROPERTIES:
:CUSTOM_ID: dev-tools-setup
:ID:       a7ea3f46-95ba-46bf-a09a-aeea0550b52a
:END:

This script handles one-time installation of development tools. It's separated from the shell configuration to keep the shell startup fast and clean.

#+begin_src fish :tangle "~/bin/setup-dev-tools.fish" :mkdirp yes :shebang "#!/usr/bin/env fish"
  set -g TOOL_LOG "/tmp/dotfiles-setup.log"

  function log_step
      echo (date "+%Y-%m-%d %H:%M:%S") "[$argv[1]]" $argv[2..-1] >> $TOOL_LOG
      echo "$argv[2..-1]"
  end

  function check_dependency
      if ! type -q $argv[1]
          echo "Missing dependency: $argv[1]"
          if test (count $argv) -gt 1
              echo "   Install with: $argv[2..-1]"
          end
          return 1
      end
      return 0
  end

  function install_with_retry
      set -l cmd $argv[1..-1]
      set -l max_attempts 3

      for attempt in (seq $max_attempts)
          log_step "ATTEMPT" "$attempt/$max_attempts: $cmd"

          if eval $cmd
              log_step "SUCCESS" "$cmd"
              return 0
          else
              log_step "FAILED" "Attempt $attempt failed: $cmd"
              if test $attempt -lt $max_attempts
                  echo "Retrying in 2 seconds..."
                  sleep 2
              end
          end
      end

      log_step "ERROR" "All attempts failed: $cmd"
      return 1
  end

  function install_rust_toolchain
      log_step "START" "Installing Rust toolchain"

      if type -q cargo
          log_step "SKIP" "Rust already installed"
          return 0
      end

      if not install_with_retry "curl https://sh.rustup.rs -sSf | sh -s -- -y --no-modify-path --default-toolchain stable --profile minimal"
          return 1
      end

      # Source cargo environment
      if test -f ~/.cargo/env
          source ~/.cargo/env
      end
  end

  function install_rust_tools
      echo "🦀 Installing Rust tools..."

      set -l rust_tools zoxide starship fd-find bat ripgrep cargo-update
      for tool in $rust_tools
          set -l check_name (string replace -- '-find' '' $tool)
          if ! type -q $check_name
              log_step "INSTALL" "Installing $tool..."
              if not install_with_retry "cargo install $tool --locked"
                  echo "❌ Failed to install $tool"
              end
          else
              log_step "SKIP" "$tool already installed"
          end
      end
  end

  function install_go_tools
      echo "🐹 Installing Go tools..."

      if ! test -e /usr/local/go
          echo "❌ Go not found at /usr/local/go. Please install Go first."
          return 1
      end

      set -l go_tools \
          golang.org/x/tools/gopls@latest \
          github.com/golangci/golangci-lint/cmd/golangci-lint@latest \
          github.com/nao1215/gup@latest

      for tool in $go_tools
          set tool_name (basename $tool | string replace '@latest' '')
          if ! type -q $HOME/go/bin/$tool_name
              log_step "INSTALL" "Installing $tool_name..."
              if not install_with_retry "go install $tool"
                  echo "❌ Failed to install $tool_name"
              end
          else
              log_step "SKIP" "$tool_name already installed"
          end
      end
  end

  function install_nerd_fonts
      echo "🔤 Installing Nerd Fonts..."

      if ! test -d ~/.nerd-fonts
          log_step "INSTALL" "Cloning Nerd Fonts repository..."
          if install_with_retry "git clone --filter=blob:none --sparse git@github.com:ryanoasis/nerd-fonts ~/.nerd-fonts"
              cd ~/.nerd-fonts
              git sparse-checkout add patched-fonts/FiraCode
              git sparse-checkout add patched-fonts/CascadiaCode
              cd -
              log_step "SUCCESS" "Nerd Fonts repository cloned"
          end
      else
          log_step "SKIP" "Nerd Fonts already cloned"
      end
  end

  function install_homebrew
      echo "🍺 Installing Homebrew..."

      if type -q brew
          log_step "SKIP" "Homebrew already installed"
          return 0
      end

      # Install Homebrew for macOS or Linux
      log_step "INSTALL" "Installing Homebrew package manager..."
      if not install_with_retry '/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"'
          echo "❌ Failed to install Homebrew"
          return 1
      end

      # Add Homebrew to PATH for this session
      if test (uname -s) = Darwin
          # macOS
          if test -x /opt/homebrew/bin/brew
              eval (/opt/homebrew/bin/brew shellenv)
          else if test -x /usr/local/bin/brew
              eval (/usr/local/bin/brew shellenv)
          end
      else
          # Linux
          if test -x /home/linuxbrew/.linuxbrew/bin/brew
              eval (/home/linuxbrew/.linuxbrew/bin/brew shellenv)
          end
      end

      log_step "SUCCESS" "Homebrew installed successfully"
  end

  function install_brew_packages
      echo "📦 Installing packages from Brewfile..."

      if not type -q brew
          echo "❌ Homebrew not found, skipping package installation"
          return 1
      end

      # Create Brewfile if it doesn't exist
      if not test -f ~/Brewfile
          log_step "CREATE" "Creating default Brewfile"
          create_brewfile
      end

      log_step "INSTALL" "Installing packages from ~/Brewfile..."
      if not install_with_retry "brew bundle --file=~/Brewfile"
          echo "❌ Failed to install some packages from Brewfile"
          return 1
      end

      log_step "SUCCESS" "Homebrew packages installed successfully"
  end

  function create_brewfile
      log_step "CREATE" "Creating ~/Brewfile with essential packages"

      echo '# Essential development tools
brew "git"
brew "curl"
brew "wget"
brew "jq"
brew "yq"
brew "tree"
brew "htop"
brew "fzf"
brew "gh"
brew "delta"

# Development languages and tools
brew "node"
brew "python@3.11"
brew "go"

# Modern CLI replacements (commenting these out since we install via Rust/Cargo)
# Uncomment if you prefer Homebrew versions over Cargo versions
# brew "fd"
# brew "bat"
# brew "ripgrep"
# brew "zoxide"
# brew "starship"

# macOS specific packages
if OS.mac?
  brew "mas"  # Mac App Store CLI

  # GUI applications via cask
  cask "visual-studio-code"
  cask "docker"
  cask "firefox"
  cask "rectangle"
  cask "alfred"
  cask "iterm2"
  cask "wezterm"
end

# Linux specific packages
if OS.linux?
  brew "gcc"
end' > ~/Brewfile

      log_step "SUCCESS" "Created ~/Brewfile"
  end

  function main
      echo "🚀 Development Tools Setup"
      echo "📝 Logging to $TOOL_LOG"

      # Check system dependencies
      if not check_dependency curl "sudo apt install curl"
          exit 1
      end

      if not check_dependency git "sudo apt install git"
          exit 1
      end

      # Install package managers first
      install_homebrew || exit 1
      install_brew_packages

      # Install Rust toolchain and tools
      install_rust_toolchain || exit 1
      install_rust_tools

      # Install other tools
      install_go_tools
      install_nerd_fonts

      # Update tools if available
      if type -q gup
          gup update
      end

      if type -q cargo-install-update
          cargo install-update -a
      end

      echo "✅ Setup complete!"
      echo "📝 Full log available at $TOOL_LOG"
      echo "🔄 Run 'exec fish' to restart your shell"
  end

  # Run if called directly
  if test (basename (status filename)) = "setup-dev-tools.fish"
      main $argv
  end
#+end_src

*** Usage

After tangling, make the script executable and run it:

#+begin_src bash :tangle no
chmod +x ~/bin/setup-dev-tools.fish
~/bin/setup-dev-tools.fish
#+end_src

** Brewfile
:PROPERTIES:
:CUSTOM_ID: brewfile
:ID:       6a814307-3d7c-4337-a7cc-7a8bf7a12c1c
:END:

A Brewfile for managing packages via Homebrew. The setup script will create a default one if it doesn't exist, but you can customize this as needed.

#+begin_src ruby :tangle "~/Brewfile" :mkdirp yes
# Essential development tools
brew "git"
brew "curl"
brew "wget"
brew "jq"
brew "yq"
brew "tree"
brew "htop"
brew "fzf"
brew "gh"
brew "delta"

# Development languages and tools
brew "node"
brew "python@3.11"
brew "go"

# Modern CLI replacements (commenting these out since we install via Rust/Cargo)
# Uncomment if you prefer Homebrew versions over Cargo versions
# brew "fd"
# brew "bat"
# brew "ripgrep"
# brew "zoxide"
# brew "starship"

# macOS specific packages
if OS.mac?
  brew "mas"  # Mac App Store CLI

  # GUI applications via cask
  cask "visual-studio-code"
  cask "docker"
  cask "firefox"
  cask "rectangle"
  cask "alfred"
  cask "iterm2"
  cask "wezterm"
end

# Linux specific packages
if OS.linux?
  brew "gcc"
end
#+end_src

** Shell Configuration
:PROPERTIES:
:CUSTOM_ID: fish-shell-config
:ID:       f1eac489-d525-488d-aeba-dd7ab3a167c0
:END:

The actual Fish shell configuration, focused purely on configuration rather than installation.

  #+begin_src fish :tangle "~/.config/fish/config.fish" :mkdirp yes
    set -g fish_greeting ""
    set -U fish_user_paths ~/.cargo/bin ~/.fzf/bin ~/go/bin /usr/local/go/bin ~/bin

    # Helper function to add path if directory exists
    function add_path_if_exists
        if test -d $argv[1]
            fish_add_path $argv[1]
        end
    end

    # Helper function for multiple path additions
    function add_paths_if_exist
        for path in $argv
            add_path_if_exists $path
        end
    end

    # Homebrew path setup for macOS and Linux
    if test (uname -s) = Darwin
        # macOS: For Intel Macs, Homebrew's default prefix is /usr/local
        # For Apple Silicon (M1/M2/etc.) Macs, Homebrew's default prefix is /opt/homebrew
        add_paths_if_exist /opt/homebrew/bin /usr/local/bin /opt/homebrew/sbin /usr/local/sbin

        # Initialize Homebrew environment if available
        if type -q brew
            eval (brew shellenv)
        else
            # Try to initialize from common locations if not in PATH yet
            if test -x /opt/homebrew/bin/brew
                eval (/opt/homebrew/bin/brew shellenv)
            else if test -x /usr/local/bin/brew
                eval (/usr/local/bin/brew shellenv)
            end
        end
    else
        # Linux: Homebrew installs to /home/linuxbrew/.linuxbrew
        add_path_if_exists /home/linuxbrew/.linuxbrew/bin
        add_path_if_exists /home/linuxbrew/.linuxbrew/sbin

        # Initialize Homebrew environment if available
        if type -q brew
            eval (brew shellenv)
        else if test -x /home/linuxbrew/.linuxbrew/bin/brew
            eval (/home/linuxbrew/.linuxbrew/bin/brew shellenv)
        end
    end
#+end_src

Install ~zoxide~ a great tool for navigating directories in the command line. It learns your history
then you can just call ~z name~ to jump to a directory that matches that name. The ~zi~ command will
give a fuzzy list of possible matches.

Install ~starship~ for a nice, informative prompt with minimal config.
#+begin_src fish :tangle "~/.config/fish/config.fish" :mkdirp yes
  if status is-interactive
      # Initialize zoxide for smart directory jumping
      if type -q zoxide
          zoxide init fish | source
      end

      # Initialize starship prompt
      if type -q starship
          starship init fish | source
      end
  end
#+end_src

Rust toolchain configuration (installation handled by setup script).

Add the ~fisher~ plugin manager and plugins.

The emacs plugin gives us the following useful aliases:
- ~e~ :: open the given file with ~emacsclient~ and return immediately
- ~ecd~ :: prints the directory of the currently visited buffer
- ~efile~ :: prints the filename of the currently visited buffer
- ~eeval~ :: evaluate some lisp from the command line
- ~ek~ :: kill any currently running emacs instances

The ~fzf.fish~ plugin. This gives a number of useful keybindings:
- ~Ctrl r~ :: use ~fzf~ to search through history
- ~Ctrl Alt F~ :: show fuzzy list of all non-hidden files under the current directory
- ~Ctrl Alt L~ :: show fuzzy ~git log~. On selection, print the hash of the selected commits.
- ~Ctrl Alt S~ :: show fuzzy ~git status~.
- ~Ctrl Alt P~ :: show fuzzy process list. On selection, print the ~pid~ of the selected process.

#+begin_src fish :tangle "~/.config/fish/config.fish" :mkdirp yes
  # Install fisher if it's not found
  if ! functions -q fisher
      echo "Installing Fisher..."
      curl -sL https://raw.githubusercontent.com/jorgebucaran/fisher/main/functions/fisher.fish | source && fisher install jorgebucaran/fisher
      # Install all plugins
      fisher install \
          oh-my-fish/plugin-emacs \
          PatrickF1/fzf.fish \
          dracula/fish \
          jorgebucaran/nvm.fish
  end
#+end_src


#+begin_src fish :tangle "~/.config/fish/config.fish" :mkdirp yes
  add_path_if_exists /opt/emacs29/bin
  set -gx EDITOR emacsclient
#+end_src

Install ~fzf~ for fuzzy matching things.
#+begin_src fish :tangle "~/.config/fish/config.fish" :mkdirp yes
  if ! test -e ~/.fzf/
      git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf
      ~/.fzf/install --bin
  end
#+end_src

Configure ~FZF~ options and ~fd~ integration:
#+begin_src fish :tangle "~/.config/fish/config.fish" :mkdirp yes
  set -gx FZF_DEFAULT_OPTS '--height 40% --layout=reverse --border'
  set -gx fzf_history_time_format %d-%m-%Y

  # Use fd with fzf if available
  if type -q fd
      set -gx FZF_DEFAULT_COMMAND 'fd --type f --hidden --follow --exclude .git'
  end
#+end_src

Configure ~eza~ as a modern ~ls~ replacement with icons and better formatting.
#+begin_src fish :tangle "~/.config/fish/config.fish" :mkdirp yes
  # Use eza if available
  if type -q eza
      # Use alias here instead of abbr since I don't want these expanded
      alias ls="eza --group-directories-first --icons"
      alias l="eza --group-directories-first --icons -l"
      alias la="eza --group-directories-first --icons -a"
      alias ll="eza --group-directories-first --icons -la"
      alias lt="eza --group-directories-first --icons --tree"
  end
#+end_src

Configure ~bat~ as a modern ~cat~ replacement with syntax highlighting.
#+begin_src fish :tangle "~/.config/fish/config.fish" :mkdirp yes
  # Use bat if available
  if type -q bat
      abbr --add cat bat
  end
#+end_src

Add alias for ~ugrep~ if installed.
#+begin_src fish :tangle "~/.config/fish/config.fish" :mkdirp yes
  if type -q ugrep
      alias u="ugrep"
  end
#+end_src

Some basic aliases
#+begin_src fish :tangle "~/.config/fish/config.fish" :mkdirp yes
  abbr --add ... cd ../..
#+end_src


Setup a bunch of useful ~git~ aliases.
#+begin_src fish :tangle "~/.config/fish/config.fish" :mkdirp yes
  abbr --add g git
  abbr --add gst git status
  abbr --add ga git add
  abbr --add gb git branch
  abbr --add gl git pull
  abbr --add gcmsg git commit --message
  abbr --add gco git checkout
  abbr --add gd git diff
  abbr --add gdc git diff --cached
  abbr --add gds git diff --staged
  abbr --add glgg git log --graph
  abbr --add glgga git log --graph --decorate --all
  abbr --add glgm git log --graph --max-count=10
  abbr --add glods git log --graph --pretty="%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ad) %C(bold blue)<%an>%Creset" --date=short
  abbr --add glod git log --graph --pretty="%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ad) %C(bold blue)<%an>%Creset"
  abbr --add glola git log --graph --pretty="%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ar) %C(bold blue)<%an>%Creset" --all
  abbr --add glols git log --graph --pretty="%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ar) %C(bold blue)<%an>%Creset" --stat
  abbr --add glol git log --graph --pretty="%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ar) %C(bold blue)<%an>%Creset"
  abbr --add glo git log --oneline --decorate
  abbr --add glog git log --oneline --decorate --graph
  abbr --add gloga git log --oneline --decorate --graph --all
#+end_src

Some useful ~jujutsu~ aliases.
#+begin_src fish :tangle "~/.config/fish/config.fish" :mkdirp yes
  abbr --add j jj

  abbr --add jn jj new
  abbr --add jnr jj new -r
  abbr --add jna jj new -A
  abbr --add jnb jj new -B

  abbr --add jdm jj desc -m
  abbr --add jdr jj desc -r

  abbr --add je jj edit
  abbr --add jer jj edit -r

  abbr --add jr jj rebase

  abbr --add jf jj diff

  abbr --add jst jj status
  abbr --add jstr jj status -r

  abbr --add jl jj log

  abbr --add jbs jj bookmark set
  abbr --add jbsr jj bookmark set -r

  abbr --add jgp jj git push
  abbr --add jgf jj git fetch

  abbr --add pc pre-commit run --all-files
#+end_src

Setup ~go~-related config. I should probably check that ~go~ is actually installed first.

#+begin_src fish :tangle "~/.config/fish/config.fish" :mkdirp yes
  # Configure Go environment if Go is installed
  if test -e /usr/local/go
      set -gx GOPATH $HOME/go/
      set -gx GO111MODULE on
  end

  # Go development abbreviations
  abbr --add gob 'go build ./...'
  abbr --add got 'INTEGRATION_TESTS=true go test ./...'
  abbr --add gotc 'INTEGRATION_TESTS=true go test ./... -count 1'
  abbr --add goup 'go get -u all'
#+end_src

Setup some useful ~k8s~ config.
#+begin_src fish :tangle "~/.config/fish/config.fish" :mkdirp yes
  if type -q kubectl
      set -gx KUBECONFIG $HOME/.kube/config

      abbr --add k kubectl
      abbr --add kx kubectx
      abbr --add kns kubens

      # Get commands
      abbr --add kg kubectl get
      abbr --add kgp kubectl get pods
      abbr --add kgpa kubectl get pods -A
      abbr --add kgns kubectl get namespaces
      abbr --add kgall kubectl get ingress,service,deployment,pod
      abbr --add kgcj kubectl get cronjobs
      abbr --add kgj kubectl get jobs
      abbr --add kctx kubectx

      # Describe commands
      abbr --add kd kubectl describe
      abbr --add kdp kubectl describe pod
      abbr --add kds kubectl describe service

      # Delete (kill) commands
      abbr --add kkp kubectl delete pods

      # Networking
      abbr --add kpf kubectl port-forward
      abbr --add kp kubectl proxy
  end
#+end_src

Emacs ~vterm~ setup.
#+begin_src fish :tangle "~/.config/fish/config.fish" :mkdirp yes
  # Taken from: https://github.com/pymander/vfish/
  if test 'vterm' = "$INSIDE_EMACS" \
      -a -n "$EMACS_VTERM_PATH" \
      -a -f "$EMACS_VTERM_PATH/etc/emacs-vterm.fish"

  # Clean up old junk functions just in case.
  functions --erase vterm_old_fish_prompt

  # Load the setup that comes with vterm.
  source "$EMACS_VTERM_PATH/etc/emacs-vterm.fish"

  function vf --description 'Open a file for editing in Emacs from vterm'
      vterm_cmd find-file (realpath "$argv")
  end

  function vd --description 'Run dired on a directory from vterm'
      set -f dir "$argv"
      if test "x" = "x$dir"
          set dir (pwd)
      end
      vterm_cmd dired (realpath "$dir")
  end

  function vz --description 'Use "zoxide" to run dired directly from vterm'
      if functions --query __zoxide_z
          set -l dir (zoxide query "$argv[1]")
          vterm_cmd dired (realpath "$dir")
      else
          echo "Install zoxide to use this command."
          return 1
      end
  end
  end
#+end_src

Source any local config
#+begin_src fish :tangle "~/.config/fish/config.fish" :mkdirp yes
  if test -e ~/notebook/local-dotfiles/fishrc
      source ~/notebook/local-dotfiles/fishrc
  end

#+end_src

* Jujutsu
:PROPERTIES:
:ID:       5A6C158E-26C3-4F66-8095-1CD519811E85
:END:


First setup a script to allow Emacs to be used to resolve conflicts in Jujutsu!
#+begin_src bash :tangle "~/bin/emacs-resolver.sh" :mkdirp yes :tangle-mode (identity #o755)
  #!/bin/sh
  #
  # This script correctly resolves jj conflicts for Emacs.
  # 1. It receives paths for left, right, base, and an empty output file from jj.
  # 2. It uses `git merge-file` to create a file with conflict markers at the output path.
  # 3. It then opens the now-populated output file with emacsclient.
  #

  # Assign arguments to named variables for clarity
  output="$1"
  base="$2"
  left="$3"
  right="$4"

  # `git merge-file` modifies its first argument in-place.
  # So, first we copy one of the versions (e.g., left) to the output path.
  cp "$left" "$output"

  # Now, run the merge. git merge-file will populate the $output file with
  # the merged content and standard conflict markers.
  # The exit code is ignored (|| true) because a conflict is not a script error.
  git merge-file -L "left" -L "base" -L "right" "$output" "$base" "$right" || true

  # Finally, open the now-populated file in Emacs.
  exec emacsclient "$output"
#+end_src


This is a pretty nasty way to work around this issue. But it works!
#+NAME: email
#+begin_src sh :results raw
cat ~/.email
#+end_src

#+begin_src toml :tangle "~/.config/jj/config.toml" :mkdirp yes :noweb yes
  [user]
  name = "Andrew Thompson"
  email = "<<email()>>"

  # SM's jj config. Last updated 2025-05
  # https://jj-vcs.github.io/jj/latest/config/

  [snapshot]
  auto-track = "none()"

  [ui]
  default-command = "log"
  diff-formatter = ["difft", "--color=always", "$left", "$right"]
  # conflict-marker-style = "diff"
  # conflict-marker-style = "snapshot"
  # conflict-marker-style = "git"

  merge-editor = ["emacs-resolver.sh", "$output", "$base", "$left", "$right"]

  [merge-tools.difft]
  diff-args = ["--color=always", "--display=side-by-side-show-both", "$left", "$right"]

  [git]
  push-new-bookmarks = true

  [aliases]
  # Custom jj commands.
  # Some things to watch out for with jj aliases:
  # - Keep them minimal; remain familiar with the builtin commands and defaults.
  # - If they use -r, a command line -r will add to that, not override it.
  # - If they use other options like -T or -n, those can't be overridden on the command line.

  # log aliases. Most of these use -T and -n; the b and custom variants also use -r.
  # All of them show graph structure; to hide it add --no-graph (can show confused output).

  # "l" aliases: list recent changes on multiple branches, elided, as one line.
  # add more l's to show more changes: l=10, ll=30, lll=100, llll=all
  l           = ["log", "-Tlog1", "-n10"]
  ll          = ["log", "-Tlog1", "-n30"]
  lll         = ["log", "-Tlog1", "-n100"]
  llll        = ["log", "-Tlog1"]

  # append v to show full descriptions
  lv          = ["log", "-Tlogv", "-n10"]
  llv         = ["log", "-Tlogv", "-n30"]
  lllv        = ["log", "-Tlogv", "-n100"]
  llllv       = ["log", "-Tlogv"]

  # prepend b to show current branch only, non-elided
  bl          = ["log", "-Tlog1", "-r::@", "-n10"]
  bll         = ["log", "-Tlog1", "-r::@", "-n30"]
  blll        = ["log", "-Tlog1", "-r::@", "-n100"]
  bllll       = ["log", "-Tlog1", "-r::@"]

  blv         = ["log", "-Tlogv", "-r::@", "-n10"]
  bllv        = ["log", "-Tlogv", "-r::@", "-n30"]
  blllv       = ["log", "-Tlogv", "-r::@", "-n100"]
  bllllv      = ["log", "-Tlogv", "-r::@"]

  # "log1" aliases: list changes as one line, showing committer or author time in original or current time zone.
  log1        = ["log", "-Tlog1"]
  log1a       = ["log", "-Tlog1author"]
  log1z       = ["log", "-Tlog1current"]
  log1az      = ["log", "-Tlog1authorcurrent"]

  # "log" aliases: other custom change lists, using the default template (builtin_log_compact)
  #log                                                          # default log view: trunk and unmerged/unpushed branches, as two lines
  logconflicts = ["log", "-r", "conflicts()"]                   # conflicting commits
  lognew       = ["log", "-r", "(master..@):: | (master..@)-"]  # commits since master in current branch
  logpush      = ["log", "-r", "trunk()::@"]                    # unpushed to origin in current branch
  logpushall   = ["log", "-r", "remote_bookmarks()..@-"]        # unpushed to all remotes in current branch ?
  logpushall2  = ["log", "-r", "(remote_bookmarks()..@)::@"]    # unpushed to all remotes in current branch ?
  logpull      = ["log", "-r", "@..trunk()"]                    # unpulled from origin in current branch
  logpullall   = ["log", "-r", "@-..remote_bookmarks()"]        # unpulled from all remotes in current branch


  # op log
  o          = ["op", "log"]                                      # all operations
  oo         = ["op", "log", "-T", "builtin_op_log_comfortable"]  # all operations, with more whitespace

  tug = ["bookmark", "move", "--from", "closest_bookmark(@-)", "--to", "@-"]

  abandonempties = ["abandon", "-r", "description(exact:'') ~ root()"]

  # recent N will give all my changes for the last N days
  recent = ["util", "exec", "--", "bash", "-c", "days=${1:-2}; jj log -r \"committer_date(after:\\\"$days days ago\\\") & mine()\" \"${@:2}\"", ""]

  [revsets]
  # I believe this section is used only for:
  #  log            - customise what jj log shows when neither -r nor any paths are specified https://jj-vcs.github.io/jj/latest/config/#log
  #  short-prefixes - customise which changes to show with shorter prefixes

  # the default (also named as log_default below): trunk and unmerged/unpushed branches
  #log = "present(@) | ancestors(immutable_heads().., 2) | present(trunk())"
  # custom:
  #log = "recent"

  #short-prefixes = "(main..@)::"  # the current branch

  [revset-aliases]
  # Custom revsets.
  # https://jj-vcs.github.io/jj/latest/revsets
  # https://jj-vcs.github.io/jj/latest/revsets/#examples
  # HEAD        = '@-'
  log_default = "present(@) | ancestors(immutable_heads().., 2) | present(trunk())"
  recent      = "latest(log_default, 30)"   # latest 30 of default log
  'person(x)' = 'author(x) | committer(x)'  # authored or committed by specified person
  # "all commits authored by me that are not merged into main that can be rebased on main"
  mymergeable = "all:mutable() & mine()"

  'closest_bookmark(to)' = 'heads(::to & bookmarks())'

  # https://jj-vcs.github.io/jj/latest/config/#set-of-immutable-commits
  # The default set of immutable heads is builtin_immutable_heads(), which in turn
  # is defined as present(trunk()) | tags() | untracked_remote_bookmarks().
  #"immutable_heads()" = "builtin_immutable_heads()"
  #"immutable_heads()" = "builtin_immutable_heads() | '[0-9]*@origin'"

  # set all remote bookmarks (commits pushed to remote branches) to be immutable
  #'immutable_heads()' = "builtin_immutable_heads() | remote_bookmarks()"


  # https://jj-vcs.github.io/jj/latest/templates/
  # https://github.com/jj-vcs/jj/blob/main/cli/src/config/templates.toml
  # https://docs.rs/chrono/latest/chrono/format/strftime/

  [templates]
  # The default output template for each command.

  # preserve log's default output, for tools/uis which expect that:
  #log = "builtin_log_compact"  # two lines, description summary only
  # or customise it to my preference:
  #log = "log1"  # one line
  #log = "logv"  # one line + full description

  [template-aliases]
  # Additional templates and helpers.

  # log templates. Most of these use my smlog() layout.

  # Author's name, committer's timestamp and time zone, full descriptions.
  logv = 'smlog(original_time(committer.timestamp()), description, bookmarks, tags)'

  # Like logv but just one line of description.
  log1 = 'smlog(original_time(committer.timestamp()), description.first_line(), bookmarks, tags)'

  # Like log1 but shows committer's timestamp localised to current time zone.
  log1current = 'smlog(local_time(committer.timestamp()), description.first_line(), bookmarks, tags)'

  # Like log1 but shows author's timestamp and time zone.
  log1author = 'smlog(original_time(author.timestamp()), description.first_line(), bookmarks, tags)'

  # Like log1a but shows author's timestamp localised to current time zone.
  log1authorcurrent = 'smlog(local_time(author.timestamp()), description.first_line(), bookmarks, tags)'

  # Like log1 but don't show bookmarks.
  log1nobookmarks = 'smlog(original_time(committer.timestamp()), description.first_line(), "", tags)'

  # Like log1 but don't show tags.
  log1notags = 'smlog(original_time(committer.timestamp()), description.first_line(), bookmarks, "")'

  # Two lines per change (default layout)
  log2 = "builtin_log_compact"

  # Two lines per change (sm layout)
  # log2 = "smlog2"

  # Three lines per change (default layout)
  log3 = 'builtin_log_compact ++ "\n"'

  # helpers:

  'local_time(timestamp)'       = 'timestamp.local().format("%Y-%m-%d %H:%M:%S")'
  'localised_time(timestamp)'   = 'timestamp.local().format("%Y-%m-%d %H:%M:%S %z")'
  'original_time(timestamp)'    = 'timestamp.format("%Y-%m-%d %H:%M:%S %z")'

  # Generate a log template with a more aligned layout for readability:
  # both hashes and other fixed width fields on the left,
  # bookmarks and tags displayed optionally (used by jjbookmarks, jjtags),
  # bookmarks enclosed in brackets to distinguish them from tags,
  # description starting on the same line.
  'smlog(timestr, description, bookmarks, tags)' = '''
  if(root,
    format_root_commit(self),
    label(if(current_working_copy, "working_copy"),
      concat(
        separate(" ",
          format_short_change_id_with_hidden_and_divergent_info(self),
          format_short_commit_id(commit_id),
          timestr,
          if(bookmarks,surround("[","]",bookmarks),""),
          tags,
          working_copies,
          if(git_head, label("git_head", "git_head()")),
          if(conflict, label("conflict", "conflict")),
          if(empty, label("empty", "(empty)")),
          if(author.email(), author.email().local(), email_placeholder),
          if(description,
            description,
            label(if(empty, "empty"), description_placeholder),
          ),
        ) ++ "\n",
      ),
    )
  )
  '''
#+end_src

* Starship
:PROPERTIES:
:ID:       0C68921D-BD1C-4510-8F72-5AD0480CBA8C
:CUSTOM_ID: starship
:END:
[[https://starship.rs/][Starship]] is an easy way to get a decent shell prompt without much messing around.
#+BEGIN_SRC toml  :tangle "~/.config/starship.toml" :mkdirp yes
  # I include this so I can keep the directory first, before the kubernetes context
  format = """
  $username\
  $hostname\
  $localip\
  $shlvl\
  $singularity\
  $directory\
  $vcsh\
  ${custom.jj}\
  $pijul_channel\
  $docker_context\
  $package\
  $c\
  $cmake\
  $cobol\
  $daml\
  $dart\
  $deno\
  $dotnet\
  $elixir\
  $elm\
  $erlang\
  $fennel\
  $golang\
  $guix_shell\
  $haskell\
  $haxe\
  $helm\
  $java\
  $julia\
  $kotlin\
  $gradle\
  $lua\
  $nim\
  $nodejs\
  $ocaml\
  $opa\
  $perl\
  $php\
  $pulumi\
  $purescript\
  $python\
  $raku\
  $rlang\
  $red\
  $ruby\
  $rust\
  $scala\
  $solidity\
  $swift\
  $typst\
  $vlang\
  $vagrant\
  $zig\
  $buf\
  $nix_shell\
  $conda\
  $meson\
  $spack\
  $memory_usage\
  $aws\
  $gcloud\
  $openstack\
  $azure\
  $kubernetes\
  $direnv\
  $env_var\
  $crystal\
  $custom\
  $sudo\
  $cmd_duration\
  $line_break\
  $jobs\
  $battery\
  $time\
  $status\
  $os\
  $container\
  $shell\
  $character"""

  [directory]
  truncate_to_repo = true
  truncation_length = 0
  style = "bold #50fa7b"

  [aws]
  style = "bold #ffb86c"

  [character]
  error_symbol = "[λ](bold #ff5555) "
  success_symbol = "[λ](bold #50fa7b) "

  [cmd_duration]
  style = "bold #f1fa8c"

  [git_branch]
  style = "bold #ff79c6"

  [git_status]
  style = "bold #ff5555"

  [hostname]
  style = "bold #bd93f9"

  [username]
  format = "[$user]($style) on "
  style_user = "bold #8be9fd"

  [kubernetes]
  disabled = false
  format = 'on [$symbol$context/$namespace]($style) '
  style = "bold #bd93f9"
  symbol = "☸ "

  [docker_context]
  disabled = false

  [time]
  disabled = false

  [custom.jj]
  command = "prompt"
  format = "$output"
  ignore_timeout = true
  shell = ["starship-jj", "--ignore-working-copy", "starship"]
  use_stdin = false
  when = true

#+END_SRC

* Wezterm
:PROPERTIES:
:ID:       D87A9FD1-E048-445A-AF6B-2546E73C2297
:CUSTOM_ID: wezterm
:END:

Testing out ~wezterm~ as an alternative to ~alacritty~ since it was giving me some issues on MacOS.

TODO:
- check window decorations
- use official dracula theme
#+begin_src lua :tangle "~/.config/wezterm/wezterm.lua" :mkdirp yes
-- Pull in the wezterm API
local wezterm = require 'wezterm'

-- This table will hold the configuration.
local config = {}

-- In newer versions of wezterm, use the config_builder which will
-- help provide clearer error messages
if wezterm.config_builder then
  config = wezterm.config_builder()
end


config.color_scheme = 'Dracula'

config.font = wezterm.font 'FiraCode Nerd Font'
config.font_size = 14.0

config.enable_tab_bar = false

config.window_padding = {
  left = "1cell",
  right = "1cell",
  top = 2,
  bottom = 0,
}


config.mouse_bindings = {
  -- Open URLs with CMD+Click
  {
    event = { Up = { streak = 1, button = 'Left' } },
    mods = 'CMD',
    action = wezterm.action.OpenLinkAtMouseCursor,
  }
}

config.keys = {
  -- disable creating new tabs.
  { key = 't', mods = 'CMD', action = wezterm.action.Nop },
}

config.check_for_updates = true

enable_kitty_graphics=true

return config
#+end_src
