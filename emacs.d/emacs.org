#+TITLE: emacs.org
#+PROPERTY: header-args:emacs-lisp :tangle ~/.emacs.d/init.el :results silent :exports code

* emacs.org
** What is this?
This is my emacs configuration in =org-mode=. To output the source code run ~org-babel-tangle~
(typically ~C-c~ ~C-v~ ~t~). This will output the relevant files into ~~/.emacs.d/~ where Emacs will pick
them up.

Many (most!) things in this file have been inspired by others making their configuration
available. A few places that I've found particularly useful include:
- [[https://github.com/kwpav/dotfiles/blob/master/emacs.org][kwpav's config]]
- [[http://pages.sachachua.com/.emacs.d/Sacha.html][Sacha Chua's config]]
- [[https://github.com/TheBB/dotemacs][TheBB's config]]
- [[https://github.com/jwiegley/dot-emacs][jwiegly's config]]
- [[https://github.com/syl20bnr/spacemacs][Spacemacs]]
- [[https://github.com/hlissner/doom-emacs][Doom Emacs]]
- [[https://github.com/MatthewZMD/.emacs.d#org0f80f62][M-EMACS]]
- [[https://github.com/ianpan870102/yay-evil-emacs/blob/master/config.org][yay-evil]]
- [[https://framagit.org/steckerhalter/steckemacs.el/-/tree/master][steckemacs]]

* TODO
- rationalise Hydra config across packages
- rationalise General config across packages
- have all hydras use q for quit
- use ~:after~ to specify any dependencies
- try [[https://github.com/minad/org-modern][~org-modern~]]
- explore this config:
  https://old.reddit.com/r/emacs/comments/ehjcu2/screenshot_polishing_my_emacs_who_said_an_old/
- have ~project.el~ run the correct make target as compile command

* Local
These are various, installation specific settings that might differ across machines, some of which I
don't want to commit to Git.

#+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/local.el" :eval no :mkdirp yes
  (provide 'local-setup)

  (setq user-full-name "Andrew Thompson"
        user-mail-address "github@downthewire.co.uk")

  (defconst my/org-dir
    "~/notebook/")

  (defconst my/org-agenda-files
    (list my/org-dir))
#+END_SRC

* Early Init
The ~early-init.el~ file is called very early in the initialisation process, so this is a good point
to disable ~package.el~ in favour of ~straight.el~.
#+BEGIN_SRC emacs-lisp :tangle "~/.emacs.d/early-init.el" :eval no
  ;; Startup speed, annoyance suppression
  (setq gc-cons-threshold 10000000)
  (setq byte-compile-warnings '(not obsolete))
  (setq warning-suppress-log-types '((comp) (bytecomp)))
  (setq native-comp-async-report-warnings-errors 'silent)

  ;; Silence stupid startup message
  (setq inhibit-startup-echo-area-message (user-login-name))

  ;; Default frame configuration: full screen, good-looking title bar on macOS
  (setq frame-resize-pixelwise t)
  (tool-bar-mode -1)                      ; All these tools are in the menu-bar anyway
  (setq default-frame-alist '((fullscreen . maximized)

  			    ;; You can turn off scroll bars by uncommenting these lines:
  			    (vertical-scroll-bars . nil)
  			    (horizontal-scroll-bars . nil)

  			    ;; Setting the face in here prevents flashes of
  			    ;; color as the theme gets activated
  			    (background-color . "#000000")
  			    (ns-appearance . dark)
  			    (ns-transparent-titlebar . t)))

  (setq package-enable-at-startup nil)
#+END_SRC

* Preamble
Some initial comment blurb.
#+BEGIN_SRC emacs-lisp
  ;;; init.el --- Initialization file for Emacs
  ;;; Commentary: Emacs Startup File --- initialization for Emacs
  ;;; Code:
#+END_SRC

Load some local setup. As noted above, this is generally installation specific, so its easiest to
keep it in a separate file.
#+BEGIN_SRC emacs-lisp
  (require 'local-setup "~/.emacs.d/local.el")
#+END_SRC

* Bedrock Emacs
All of this is new, minimal stuff from bedrock emacs:
#+BEGIN_SRC emacs-lisp
  (setopt initial-major-mode 'fundamental-mode)  ; default mode for the *scratch* buffer
  (setopt display-time-default-load-average nil) ; this information is useless for most

  ;; Save history of minibuffer
  (savehist-mode)

  ;; Move through windows with Ctrl-<arrow keys>
  (windmove-default-keybindings 'control) ; You can use other modifiers here

  ;; Fix archaic defaults
  (setopt sentence-end-double-space nil)

  ;; Don't litter file system with *~ backup files; put them all inside
  ;; ~/.emacs.d/backup or wherever
  (defun bedrock--backup-file-name (fpath)
    "Return a new file path of a given file path.
  If the new path's directories does not exist, create them."
    (let* ((backupRootDir "~/.emacs.d/emacs-backup/")
  	 (filePath (replace-regexp-in-string "[A-Za-z]:" "" fpath )) ; remove Windows driver letter in path
  	 (backupFilePath (replace-regexp-in-string "//" "/" (concat backupRootDir filePath "~") )))
      (make-directory (file-name-directory backupFilePath) (file-name-directory backupFilePath))
      backupFilePath))
  (setopt make-backup-file-name-function 'bedrock--backup-file-name)

#+END_SRC

* Package Manager
Setup the [[https://github.com/radian-software/straight.el][~straight.el~]] package manager.
#+BEGIN_SRC emacs-lisp
  (setq straight-repository-branch "develop")

  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+END_SRC

From the straight docs:
#+BEGIN_QUOTE
By setting the variable straight-cache-autoloads to a non-nil value, you can cause straight.el to
cache the autoloads of all used packages in a single file on disk, and load them from there instead
of from the individual package files if they are still up to date. This reduces the number of disk
IO operations during startup from O(number of packages) to O(1), so it should improve
performance. No other configuration should be necessary to make this work; however, you may wish to
call straight-prune-build occasionally, since otherwise this cache file may grow quite large over
time.
#+END_QUOTE
#+BEGIN_SRC emacs-lisp
  (setq straight-cache-autoloads t)
#+END_SRC

In addition:
#+BEGIN_QUOTE
You may customize straight-use-package-by-default to make it so that :straight t is assumed unless
you explicitly override it with :straight nil.
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
  (setq straight-use-package-by-default t)
#+END_SRC

todo: update this link
Install [[https://github.com/jwiegley/use-package][~use-package~]] for easily installing other packages.
#+BEGIN_SRC emacs-lisp
  ;; Install use-package to use with straight.el
  (straight-use-package 'use-package)
#+END_SRC

I don't want to use the built-in version of org-mode since it's usually pretty old. Instead I want
straight to pull down the latest version. To avoid the built-in version getting loaded we need to
explicitly load it with straight early in the init process. See more details in the [[https://github.com/radian-software/straight.el#the-wrong-version-of-my-package-was-loaded][~README.md~]].
#+BEGIN_SRC emacs-lisp
  (straight-use-package 'org)
#+END_SRC

* Core Configuration
A few miscellaneous settings. Note that emacs is not really a package strictly speaking which is why we include ~:straight nil~ so that our package manager doesn't try to fetch the source.
#+BEGIN_SRC emacs-lisp
  (use-package emacs
  :straight nil
  :init
  ;; answer with y/n instead of typing out yes/no
  (defalias 'yes-or-no-p 'y-or-n-p)
  :config
  (setq indent-tabs-mode nil
        tab-width 4
        show-trailing-whitespace t
        fill-column 100)
  (setq-default indent-tabs-mode nil
                fill-column 100)
  :custom
  ;; load new source files instead of stale elisp bytecode
  (load-prefer-newer t)
  ;; allow emacs to be any size, removes black bars
  (frame-resize-pixelwise t))
#+END_SRC

It's useful to have buffers auto-revert when files on disk change especially when using Git branches a lot!
#+BEGIN_SRC emacs-lisp
  (use-package autorevert
    :straight nil
    :custom
    (global-revert-check-vc-info t)
    :config
    (global-auto-revert-mode +1)
    ;; Automatically reread from disk if the underlying file changes
    (setopt auto-revert-avoid-polling t)
    ;; Some systems don't do file notifications well; see
    ;; https://todo.sr.ht/~ashton314/emacs-bedrock/11
    (setopt auto-revert-interval 5)
    (setopt auto-revert-check-vc-info t)
    )
#+END_SRC

Use the system keyboard when killing and yanking.
#+BEGIN_SRC emacs-lisp
  (use-package simple
    :straight nil
    :custom
    ;; killing and yanking uses the system clipboard
    (save-interprogram-paste-before-kill t))
#+END_SRC

[[https://github.com/emacs-mirror/emacs/blob/master/lisp/saveplace.el][~saveplace~]] jumps back to
the last when later visiting a file. This is handy to pick up where you left off.
#+BEGIN_SRC emacs-lisp
  (use-package saveplace
    :straight nil
    :config
    (save-place-mode +1))
#+END_SRC

[[https://github.com/emacscollective/no-littering][~no-littering~]] keeps configuration files and
other persistent data under ~user-emacs-directory~ rather than spamming them in inconsistent places.
#+BEGIN_SRC emacs-lisp
  (use-package no-littering
    :init
    (setq no-littering-etc-directory
          (expand-file-name "etc/" user-emacs-directory))
    (setq no-littering-var-directory
          (expand-file-name "var/" user-emacs-directory)))
#+END_SRC

Use a separate custom file to remove auto-generated code from ~init.el~. This should be loaded prior
to any themes so that they confirmation code gets stored in ~custom.el~.
#+BEGIN_SRC emacs-lisp
  (use-package cus-edit
    :straight nil
    :custom
    (custom-file (expand-file-name "custom.el" user-emacs-directory))
    :config
    (if (file-exists-p custom-file)
        (load-file custom-file)))
#+END_SRC

** Exec Path Setup
[[https://github.com/purcell/exec-path-from-shell][~exec-path-from-shell~]] loads the ~PATH~ from your shell setup. This is useful when running Emacs from
a non-shell environment like OSX.
#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :config
    (exec-path-from-shell-initialize))
#+end_src

** Files
Setup some basic file hygiene. Keep some backup files around, but keep them out of sight.

TODO verify that some of these aren't duplicated above
#+BEGIN_SRC emacs-lisp
  (use-package files
    :straight nil
    :init
    (recentf-mode 1)
    :config
    (setq
     backup-by-copying t
     backup-directory-alist '((".*" . "~/.emacs.d/backups/"))
     delete-old-versions t
     delete-auto-save-files t
     kept-new-versions 6
     kept-old-versions 2
     version-control t
     vc-make-backup-files t
     recentf-max-menu-items 25
     recentf-max-saved-items 500
     auto-save-file-name-transforms
     `((".*" "~/.emacs.d/auto-saves/" t))))
#+END_SRC

Use UTF-8 everywhere.
#+BEGIN_SRC emacs-lisp
(use-package mule
  :straight nil
  :config
  (prefer-coding-system 'utf-8-unix)
  (set-default-coding-systems 'utf-8-unix)
  (set-language-environment 'utf-8)
  (set-terminal-coding-system 'utf-8-unix)
  (setq locale-coding-system 'utf-8-unix)
  (set-selection-coding-system 'utf-8-unix))
#+END_SRC

Setup some basic file hygiene. Keep some backup files around, but keep them out of sight.
#+BEGIN_SRC emacs-lisp
  (use-package files
    :straight nil
    :config
    (setq
     backup-by-copying t
     backup-directory-alist '((".*" . "~/.emacs.d/backups/"))
     delete-old-versions t
     delete-auto-save-files t
     kept-new-versions 6
     kept-old-versions 2
     version-control t
     vc-make-backup-files t
     recentf-max-menu-items 25
     recentf-max-saved-items 500
     auto-save-file-name-transforms
     `((".*" "~/.emacs.d/auto-saves/" t))))
#+END_SRC


** Discoverability
[[https://github.com/justbur/emacs-which-key][~which-key~]] displays all of the available keybindings following a incompletely entered command. For
example, pressing ~C-x~ and waiting a moment will cause ~which-key~ to populate the minibuffer with all
the available next keys along with their corresponding commands. This makes discovery of new
commands very easy.

The only slight issue with this is that the size of the minibuffer expands a lot which can cause the
view of the current buffer to change depending on where the point is. ~which-key-posframe~ provides an
improvement on this by popping up in a floating window. I'll try it for a while and see.

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :custom
    (which-key-idle-delay 0)
    :config
    (which-key-mode +1))
#+END_SRC

** Minibuffer/Completion settings
#+BEGIN_SRC emacs-lisp
  ;; For help, see: https://www.masteringemacs.org/article/understanding-minibuffer-completion
  (setopt enable-recursive-minibuffers t)                ; Use the minibuffer whilst in the minibuffer
  (setopt completion-cycle-threshold 1)                  ; TAB cycles candidates
  (setopt completions-detailed t)                        ; Show annotations
  (setopt tab-always-indent 'complete)                   ; When I hit TAB, try to complete, otherwise, indent
  (setopt completion-styles '(basic initials substring)) ; Different styles to match input to candidates

  (setopt completion-auto-help 'always)                  ; Open completion always; `lazy' another option
  (setopt completions-max-height 20)                     ; This is arbitrary
  (setopt completions-detailed t)
  (setopt completions-format 'one-column)
  (setopt completions-group t)
  (setopt completion-auto-select 'second-tab)            ; Much more eager
  					;(setopt completion-auto-select t)                     ; See `C-h v completion-auto-select' for more possible values

  (keymap-set minibuffer-mode-map "TAB" 'minibuffer-complete) ; TAB acts more like how it does in the shell
#+END_SRC

** Inteface Enhancements
#+BEGIN_SRC emacs-lisp
  ;; Mode line information
  (setopt line-number-mode t)                        ; Show current line in modeline
  (setopt column-number-mode t)                      ; Show column as well

  (setopt x-underline-at-descent-line nil)           ; Prettier underlines
  (setopt switch-to-buffer-obey-display-actions t)   ; Make switching buffers more consistent

  (setopt show-trailing-whitespace nil)      ; By default, don't underline trailing spaces
  (setopt indicate-buffer-boundaries 'left)  ; Show buffer top and bottom in the margin

  ;; Enable horizontal scrolling
  (setopt mouse-wheel-tilt-scroll t)
  (setopt mouse-wheel-flip-direction t)

  ;; We won't set these, but they're good to know about
  ;;
  ;; (setopt indent-tabs-mode nil)
  ;; (setopt tab-width 4)

  ;; Misc. UI tweaks
  (blink-cursor-mode -1)                                ; Steady cursor
  (pixel-scroll-precision-mode)                         ; Smooth scrolling

  ;; Use common keystrokes by default
  (cua-mode)

  ;; Display line numbers in programming mode
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
  (setopt display-line-numbers-width 3)           ; Set a minimum width

  ;; Nice line wrapping when working with text
  (add-hook 'text-mode-hook 'visual-line-mode)

  ;; Modes to highlight the current line with
  (let ((hl-line-hooks '(text-mode-hook prog-mode-hook)))
    (mapc (lambda (hook) (add-hook hook 'hl-line-mode)) hl-line-hooks))
#+END_SRC

** Hydra
[[https://github.com/abo-abo/hydra][~hydra~]] allows us to specify related keybindings together in a
neat way. Note that ~:wk~ allows us to specify the text that is displayed by ~which-key~ for this hydra.
#+BEGIN_SRC emacs-lisp
  (use-package hydra
    :defer t)

  ;; This allows us to use :hydra within use-package
  (use-package use-package-hydra)
#+END_SRC

* Aesthetics
Turn off a bunch of frame related functionality for a more minimal experience.
#+BEGIN_SRC emacs-lisp
  (use-package frame
    :straight nil
    :config
    (blink-cursor-mode -1)
    (setq initial-scratch-message ""
          inhibit-startup-message t
          visible-bell nil
          ring-bell-function 'ignore
          initial-frame-alist
          '((menu-bar-lines . 0)
            (tool-bar-lines . 0)))
    (scroll-bar-mode 0)
    (tool-bar-mode 0)
    (menu-bar-mode 0)
    (global-hl-line-mode 1))
#+END_SRC

[[https://draculatheme.com/emacs][Dracula]] is a nice theme that's available for lots of apps.
#+BEGIN_SRC emacs-lisp  
  (use-package dracula-theme
    :config
    (load-theme 'dracula))

  (add-to-list 'default-frame-alist '(font . "Fira Code-14"))

  (use-package all-the-icons)

  (use-package all-the-icons-completion
    :init
    (all-the-icons-completion-mode))
#+END_SRC

[[https://github.com/seagle0128/doom-modeline][~doom-modeline~]] is a fancy, fast and minimal mode-line. This required running ~M-x nerd-icons-install-fonts~ to install the required icon font.
#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
    :demand t
    :init
    (column-number-mode +1)
    (doom-modeline-mode +1)
    :config
    (setq doom-modeline-height 1)
    (set-face-attribute 'mode-line nil :height 150)
    (set-face-attribute 'mode-line-inactive nil :height 150)
    :custom
    (doom-modeline-vcs-max-length 50)
    (doom-modeline-buffer-file-name-style 'truncate-upto-project))
#+END_SRC

* Keybindings
[[https://github.com/noctuid/general.el][~general.el~]] provides a convenient method for binding
keys. It also integrates well with ~use-package~. In particular, this allows us to easily setup a
global leader key, ~my-leader-def~ and chain bindings from that.
#+BEGIN_SRC emacs-lisp
  (use-package general
    :demand t
    :custom
    (general-override-states '(insert emacs hybrid normal visual motion operator replace))
    :config
    (general-define-key
     "C-w" 'backward-kill-word
     "C-c C-k" 'kill-region
     "C-x C-k" 'kill-region
     ;; C-z defaults to suspend-frame which isn't very useful
     "C-z" 'undo
     ;;"M-s" 'highlight-symbol-at-point ;;TODO conflicted with consult
     "M-c" 'hi-lock-mode
     "M-z" 'pop-global-mark
     "C-x C-m" 'execute-extended-command
     "C-x m" 'execute-extended-command
     "C-c C-m" 'execute-extended-command
     "C-c m" 'execute-extended-command
     )

    ;; Make general's keybindings take precedence over keys bound to other minor mode keymaps.
    (general-override-mode)

    ;; We need to call this so that we can allocate C-t as a prefix key. See
    ;; https://github.com/noctuid/general.el#automatic-key-unbinding for details.
    (general-auto-unbind-keys)
    ;; Create a definer where most of my commands will live under
    (general-create-definer my-leader-def
      :prefix "C-t")
    ;; Setup some initial bindings.
    ;; TODO some of these should probably live elsewhere
    (my-leader-def
      "m" 'execute-extended-command
      "a" 'org-agenda
      "b" '(:ignore t :wk "bookmarks")
      "bs" 'bookmark-set
      "bl" 'consult-bookmark
      ;; quit / restart
      "q" '(:ignore t :wk "quit / restart")
      "qq" 'save-buffers-kill-terminal
      "qQ" 'save-buffers-kill-emacs
      "qr" 'restart-emacs))
#+END_SRC

* Motion Aids
Base extras:
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :demand t
    :config (setq avy-background t
      		avy-keys '(
      			   ?a ?r ?s ?t ?g ?m ?n ?e ?i ?o
      			   ?z ?x ?c ?d ?v ?k ?h ?, ?.
      			   ?q ?w ?f ?p ?b ?j ?l ?u ?'))
    :general ("C-'" 'avy-goto-char-timer))

#+END_SRC

* Consult and Embark
#+BEGIN_SRC emacs-lisp  
  ;; Consult: Misc. enhanced commands
  (use-package consult
    ;; TODO consider using general here
    :bind (
      	 ("C-c M-x" . consult-mode-command)
      	 ("C-c h" . consult-history)
      	 ("C-c k" . consult-kmacro)
      	 ("C-c m" . consult-man)
      	 ("C-c i" . consult-info)
      	 ;; Drop-in replacements
      	 ("M-y"   . consult-yank-from-kill-ring)   ; orig. yank-pop
      	 ("M-g g" . consult-goto-line)

      	 ("C-x b" . consult-buffer)     ; orig. switch-to-buffer
      	 ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
      	 ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer

      	 ;; M-g bindings in `goto-map'
      	 ("M-g e" . consult-compile-error)
      	 ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
      	 ("M-g g" . consult-goto-line)             ;; orig. goto-line
      	 ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
      	 ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
      	 ("M-g m" . consult-mark)
      	 ("M-g k" . consult-global-mark)
      	 ("M-g i" . consult-imenu)
      	 ("M-g I" . consult-imenu-multi)
      	 ;; M-s bindings in `search-map'
      	 ("M-s d" . consult-find)                  ;; Alternative: consult-fd
      	 ("M-s c" . consult-locate)
      	 ("M-s g" . consult-grep)
      	 ("M-s G" . consult-git-grep)
      	 ("M-s r" . consult-ripgrep)
      	 ("M-s l" . consult-line)
      	 ("M-s L" . consult-line-multi)
      	 ("M-s k" . consult-keep-lines)
      	 ("M-s u" . consult-focus-lines)
      	 ;; Isearch integration
      	 ("M-s e" . consult-isearch-history)
      	 :map isearch-mode-map
      	 ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
      	 ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
      	 ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
      	 ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
      	 ;; Minibuffer history
      	 :map minibuffer-local-map
      	 ("M-s" . consult-history)                 ;; orig. next-matching-history-element

      	 )
    :config
    ;; Narrowing lets you restrict results to certain groups of candidates
    (setq consult-narrow-key "<")

    ;; set manual preview for result that will require a disk read
    (consult-customize
     consult-ripgrep consult-git-grep consult-grep
     consult-bookmark consult-recent-file consult-xref
     consult--source-bookmark consult--source-file-register
     consult--source-recent-file consult--source-project-recent-file
     ;; :preview-key '(:debounce 0.4 any) ;; Option 1: Delay preview
     :preview-key "M-.")            ;; Option 2: Manual preview
    )

  (use-package embark
    :demand t
    :after avy
    :bind (("C-c a" . embark-act))        ; bind this to an easy key to hit
    :init
    ;; Add the option to run embark when using avy
    (defun bedrock/avy-action-embark (pt)
      (unwind-protect
      	(save-excursion
      	  (goto-char pt)
      	  (embark-act))
        (select-window
         (cdr (ring-ref avy-ring 0))))
      t)

    ;; After invoking avy-goto-char-timer, hit "." to run embark at the next
    ;; candidate you select
    (setf (alist-get ?. avy-dispatch-alist) 'bedrock/avy-action-embark))

  (use-package embark-consult)

#+END_SRC
** Minibuffer and Completion
#+BEGIN_SRC emacs-lisp  
  ;; Vertico: better vertical completion for minibuffer commands
  (use-package vertico
    :init
    ;; You'll want to make sure that e.g. fido-mode isn't enabled
    (vertico-mode))

  (use-package vertico-directory
    :straight nil
    :after vertico
    :bind (:map vertico-map
    	      ("C-j" . vertico-directory-enter)
    	      ("C-l" . vertico-directory-up)
    	      ("DEL" . vertico-directory-delete-char)
    	      ("M-DEL" . vertico-directory-delete-word)))

  ;; Marginalia: annotations for minibuffer
  (use-package marginalia
    :config
    (marginalia-mode))

#+END_SRC
** Completion
#+BEGIN_SRC emacs-lisp  
  ;; Popup completion-at-point
  (use-package corfu
    :straight (:files (:defaults "extensions/*"))
    :init
    (global-corfu-mode)
    :bind
    (:map corfu-map
      	("SPC" . corfu-insert-separator)
      	("C-n" . corfu-next)
      	("C-p" . corfu-previous)))

  ;; Part of corfu
  (use-package corfu-popupinfo
    :straight nil
    :after corfu
    :hook (corfu-mode . corfu-popupinfo-mode)
    :custom
    (corfu-popupinfo-delay '(0.25 . 0.1))
    (corfu-popupinfo-hide nil)
    :config
    (corfu-popupinfo-mode))

  ;; Make corfu popup come up in terminal overlay
  (use-package corfu-terminal
    :if (not (display-graphic-p))
    :config
    (corfu-terminal-mode))

  ;; Fancy completion-at-point functions; there's too much in the cape package to
  ;; configure here; dive in when you're comfortable!
  (use-package cape
    :init
    (add-to-list 'completion-at-point-functions #'cape-dabbrev)
    (add-to-list 'completion-at-point-functions #'cape-file))

  ;; Pretty icons for corfu
  (use-package kind-icon
    :if (display-graphic-p)
    :after corfu
    :config
    (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))

  (use-package eshell
    :init
    (defun bedrock/setup-eshell ()
      ;; Something funny is going on with how Eshell sets up its keymaps; this is
      ;; a work-around to make C-r bound in the keymap
      (keymap-set eshell-mode-map "C-r" 'consult-history))
    :hook ((eshell-mode . bedrock/setup-eshell)))

  ;; Orderless: powerful completion style
  (use-package orderless
    :config
    (setq completion-styles '(orderless)))
#+END_SRC

* Editting
** Rectangles
This is a hydra for working with the ~rectangle~ commands.

TODO: I should understand how this works better.

#+BEGIN_SRC emacs-lisp
  (my-leader-def "R" '(hydra-rectangle/body :wk "rectangle"))
  (defhydra hydra-rectangle (:body-pre (rectangle-mark-mode 1)
                                       :color pink
                                       :hint nil
                                       :post (deactivate-mark))
         "
      ^_i_^       _w_ copy      _O_pen       _N_umber-lines
    _n_   _o_     _y_ank        _t_ype       _E_xchange-point
      ^_e_^       _d_ kill      _c_lear      _r_eset-region-mark
    ^^^^          _u_ndo        _q_uit       ^ ^
    "
         ("i" rectangle-previous-line)
         ("e" rectangle-next-line)
         ("n" rectangle-backward-char)
         ("o" rectangle-forward-char)
         ("d" kill-rectangle)                    ;; C-x r k
         ("y" yank-rectangle)                    ;; C-x r y
         ("w" copy-rectangle-as-kill)            ;; C-x r M-w
         ("O" open-rectangle)                    ;; C-x r o
         ("t" string-rectangle)                  ;; C-x r t
         ("c" clear-rectangle)                   ;; C-x r c
         ("E" rectangle-exchange-point-and-mark) ;; C-x C-x
         ("N" rectangle-number-lines)            ;; C-x r N
         ("r" (if (region-active-p)
                  (deactivate-mark)
                (rectangle-mark-mode 1)))
         ("u" undo nil)
         ("q" nil))
#+END_SRC

** Whitespace Removal
[[https://github.com/lewang/ws-butler][~ws-butler~]] automatically removes trailing whitespace from lines that have been editted.

#+BEGIN_SRC emacs-lisp
  (use-package ws-butler
    :demand t
    :config
    (ws-butler-global-mode))
#+END_SRC

* Software Development
** Treesitter Setup
#+BEGIN_SRC emacs-lisp
  (use-package emacs
    :config
    ;; Treesitter config
    (setq treesit-language-source-alist
  	'((bash "https://github.com/tree-sitter/tree-sitter-bash")
  	  (cmake "https://github.com/uyha/tree-sitter-cmake")
  	  (css "https://github.com/tree-sitter/tree-sitter-css")
  	  (elisp "https://github.com/Wilfred/tree-sitter-elisp")
  	  (go "https://github.com/tree-sitter/tree-sitter-go")
  	  (gomod "https://github.com/camdencheek/tree-sitter-go-mod")
  	  (dockerfile "https://github.com/camdencheek/tree-sitter-dockerfile")
  	  (html "https://github.com/tree-sitter/tree-sitter-html")
  	  (javascript "https://github.com/tree-sitter/tree-sitter-javascript" "master" "src")
  	  (json "https://github.com/tree-sitter/tree-sitter-json")
  	  (make "https://github.com/alemuller/tree-sitter-make")
  	  (markdown "https://github.com/ikatyang/tree-sitter-markdown")
  	  (python "https://github.com/tree-sitter/tree-sitter-python")
  	  (toml "https://github.com/tree-sitter/tree-sitter-toml")
  	  (tsx "https://github.com/tree-sitter/tree-sitter-typescript" "master" "tsx/src")
  	  (typescript "https://github.com/tree-sitter/tree-sitter-typescript" "master" "typescript/src")
  	  (yaml "https://github.com/ikatyang/tree-sitter-yaml")))
    ;; Tell Emacs to prefer the treesitter mode
    ;; You'll want to run the command `M-x treesit-install-language-grammar' before editing.
    (setq major-mode-remap-alist
  	'((yaml-mode . yaml-ts-mode)
  	  (bash-mode . bash-ts-mode)
  	  (go-mode . go-ts-mode)
  	  (js2-mode . js-ts-mode)
  	  (typescript-mode . typescript-ts-mode)
  	  (json-mode . json-ts-mode)
  	  (css-mode . css-ts-mode)
  	  (python-mode . python-ts-mode)))
    :hook
    ;; Auto parenthesis matching
    ((prog-mode . electric-pair-mode)))

#+END_SRC
** Git
#+BEGIN_SRC emacs-lisp  
  (use-package magit
    :bind (("C-x g" . magit-status)))
#+END_SRC

** Flymake
#+BEGIN_SRC emacs-lisp
  (use-package flymake
    ;; TODO include this in project hydra
    :bind (("H-e" . flymake-show-project-diagnostics)))
#+END_SRC

** LSP Servers
#+BEGIN_SRC emacs-lisp
  (use-package eglot
    :straight nil
    :hook
    ((go-ts-mode . eglot-ensure))
    :custom
    (eglot-send-changes-idle-time 0.1)
    ;; activate Eglot in referenced non-project files
    (eglot-extend-to-xref t)
    :config
    ;; massive perf boost---don't log every event
    (fset #'jsonrpc--log-event #'ignore))
#+END_SRC

** Particular Programming modes
#+BEGIN_SRC emacs-lisp  
  (use-package markdown-mode
    :hook ((markdown-mode . visual-line-mode)))

  (use-package yaml-mode)

  (use-package json-mode)

  (use-package go-ts-mode)

  (use-package sh-script
    :hook (sh-mode . flymake-mode))
#+END_SRC

* Yasnippets
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
     :config
    (yas-global-mode +1)
    (setq yas-snippet-dirs (append yas-snippet-dirs
  				 '("~/.emacs.d/snippets/"))))

  (use-package yasnippet-snippets
    :after yasnippet)
#+END_SRC

** Snippets
These are various snippets for use with Yasnippet.
#+BEGIN_SRC :tangle "~/.emacs.d/snippets/go-mode/ifen" :eval no :mkdirp yes
# -*- mode: snippet -*-
# name: if error nil
# key: ifen
# --
if err != nil {
  $1
}
#+END_SRC
